(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[         0,          0]
NotebookDataLength[    252403,       4726]
NotebookOptionsPosition[    250313,       4682]
NotebookOutlinePosition[    250701,       4699]
CellTagsIndexPosition[    250658,       4696]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Elastic net initial parameters", "Subsubsection",
 CellChangeTimes->{{3.7440229908159122`*^9, 3.7440229919446363`*^9}, {
   3.744023445278838*^9, 3.7440234531796303`*^9}, 
   3.7440258118797197`*^9},ExpressionUUID->"418f59ae-741d-4ff7-a1b3-\
9d255620267d"],

Cell["\<\
Steps:
1) Import data 
2) Monte Carlo cross validation to determine optimal Logistic elastic net \
regularisation parameters
3) Export\
\>", "Text",
 CellChangeTimes->{{3.744022804585944*^9, 3.744022941923102*^9}, {
  3.7440234330501623`*^9, 
  3.744023466793026*^9}},ExpressionUUID->"0cb8e356-e75f-45c0-9fd7-\
f95fb2ec4589"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Set", " ", "manually", " ", "if", "  ", "running", " ", "in", " ", 
    "notebook", " ", "and", " ", "remove", " ", "dir", " ", "setting"}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"dir", "=", 
     RowBox[{"StringJoin", "[", 
      RowBox[{
      "$UserDocumentsDirectory", ",", 
       "\"\</Numerai/elasticNetMonteCarloCrossVal-scripts/sampleJobUsage\>\""}\
], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"SetDirectory", "[", "dir", "]"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{"(*", 
    RowBox[{"Set", " ", "dir", " ", "and", " ", "import", " ", "data"}], 
    "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"dirData", "=", "\"\<~/Downloads/numerai_dataset_122\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainingData", "=", 
     RowBox[{"Import", "[", 
      RowBox[{"StringJoin", "[", 
       RowBox[{"dirData", ",", "\"\</numerai_training_data.csv\>\""}], "]"}], 
      "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.744285197977518*^9, 3.744285208554017*^9}, 
   3.744285377151393*^9, {3.744285576589047*^9, 3.744285582872038*^9}, {
   3.744285633525014*^9, 3.744285644007403*^9}, {3.7442857646197166`*^9, 
   3.744285780207103*^9}, 3.744287249430438*^9, 3.744454403120866*^9, {
   3.744456927053149*^9, 
   3.744456928027196*^9}},ExpressionUUID->"61130cd6-dba8-4963-855d-\
ef412e916665"],

Cell[BoxData["\<\"/Users/thomasmellan/Documents/Numerai/\
elasticNetMonteCarloCrossVal-scripts/sampleJobUsage\"\>"], "Output",
 CellChangeTimes->{
  3.7442853775733747`*^9, 3.744285589899106*^9, {3.744285640845921*^9, 
   3.7442856443625727`*^9}},
 CellLabel->
  "Out[117]=",ExpressionUUID->"48a3cc85-01bc-47d9-9bf1-3c93a118123e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Print", "[", "\"\<Getting training data\>\"", "]"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"If", " ", "running", " ", "as", " ", "script"}], ",", " ", 
    RowBox[{
    "run", " ", "module", " ", "1", " ", "first", " ", "to", " ", "import", 
     " ", "data", " ", "and", " ", "save", " ", "as", " ", "mx", " ", 
     "file"}], ",", " ", 
    RowBox[{"then", " ", "Get", " ", "with"}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"dirMXimport", "=", 
  RowBox[{"StringJoin", "[", 
   RowBox[{"ToString", "@", 
    RowBox[{"DirectoryName", "[", "$InputFileName", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Get", "[", 
   RowBox[{"\"\<trainingData.mx\>\"", ",", "trainingData"}], "]"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "If", " ", "running", " ", "as", " ", "a", " ", "script", " ", "set", " ", 
    "dir", " ", "as"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"dir", "=", 
   RowBox[{"StringJoin", "[", 
    RowBox[{
     RowBox[{"ToString", "@", 
      RowBox[{"DirectoryName", "[", "$InputFileName", "]"}]}], ",", 
     "\"\</sampleJobUsage\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetDirectory", "[", "dir", "]"}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Setting global parameters\>\"", "]"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{"Global", " ", "parameters"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"eraTotalNumber", "=", "120"}], ";", " ", 
   RowBox[{"(*", 
    RowBox[{
    "Numer", " ", "of", " ", "eras", " ", "in", " ", "training", " ", 
     RowBox[{"data", ".", " ", "This"}], " ", "should", " ", "be", " ", 
     "automatic", " ", "in", " ", "case", " ", "it", " ", "changes"}], "*)"}],
    "\[IndentingNewLine]", 
   RowBox[{"RegSize", "=", "6"}], " ", ";", 
   RowBox[{"(*", 
    RowBox[{
    "L1", " ", "L2", " ", "regularisation", " ", "domain", " ", "size", " ", 
     RowBox[{"(", "square", ")"}]}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{"intialRegParameters", "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}]}], ";", " ", 
   RowBox[{"(*", 
    RowBox[{
     RowBox[{"Initial", " ", "L1"}], "=", 
     RowBox[{"L2", "=", "1"}]}], "*)"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"Print", "[", "\"\<Splitting data era-wise\>\"", "]"}]}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Get", " ", "number", " ", "of", " ", "points", " ", "in", " ", "each", 
    " ", "era"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eraLabels", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"\"\<era\>\"", ",", 
       RowBox[{"ToString", "@", "i"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "eraTotalNumber"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"erasNames", "=", 
   RowBox[{
    RowBox[{"Transpose", "[", "trainingData", "]"}], "[", 
    RowBox[{"[", "2", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"eraLengths", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"Cases", "[", 
       RowBox[{"erasNames", ",", 
        RowBox[{"eraLabels", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "]"}], "//", "Length"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", 
       RowBox[{"Length", "@", "eraLabels"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"eraLengthsCumulative", "=", 
    RowBox[{"Join", "[", 
     RowBox[{
      RowBox[{"{", "0", "}"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Total", "@", 
         RowBox[{"eraLengths", "[", 
          RowBox[{"[", 
           RowBox[{"1", ";;", "i"}], "]"}], "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "@", "eraLengths"}]}], "}"}]}], "]"}]}], "]"}]}], 
   ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Split", " ", "data", " ", "era"}], "-", "wise"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fullTrainingSet", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"StringDelete", "[", 
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}], ",", "\"\<era\>\""}], "]"}], 
          "}"}], ",", 
         RowBox[{"#", "[", 
          RowBox[{"[", 
           RowBox[{"4", ";;", 
            RowBox[{"-", "6"}]}], "]"}], "]"}]}], "]"}], "->", 
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"-", "5"}], ";;", 
           RowBox[{"-", "5"}]}], "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}]}], ")"}], "&"}], "/@", 
    RowBox[{"trainingData", "[", 
     RowBox[{"[", 
      RowBox[{"2", ";;", 
       RowBox[{"-", "1"}]}], "]"}], "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"fullTrainingSplit", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"fullTrainingSet", "[", 
      RowBox[{"[", 
       RowBox[{
        RowBox[{
         RowBox[{"eraLengthsCumulative", "[", 
          RowBox[{"[", "era", "]"}], "]"}], "+", "1"}], ";;", 
        RowBox[{"eraLengthsCumulative", "[", 
         RowBox[{"[", 
          RowBox[{"era", "+", "1"}], "]"}], "]"}]}], "]"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"era", ",", "1", ",", 
       RowBox[{"Length", "@", "eraLabels"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"fullTrainingSetDataOnly", "=", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "&"}], "/@", "fullTrainingSet"}], 
     ")"}]}], ";"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Starting cross-validation\>\"", "]"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Elastic", " ", "net", " ", "parameters", " ", "determined", " ", "by", 
     " ", "Monte", " ", "Carlo", " ", "cross", " ", "validation"}], ",", " ", 
    
    RowBox[{
     RowBox[{
     "and", " ", "a", " ", "Gaussian", " ", "process", " ", "fitted", " ", 
      "to", " ", "the", " ", "log", " ", "loss", " ", "in", " ", "L1"}], "-", 
     
     RowBox[{"L2", " ", "parameter", " ", "space"}]}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"Test", " ", "parameters"}], " ", "=", " ", 
    RowBox[{"2", " ", "10", " ", "10", " ", "5", " ", "2", " ", "5"}]}], 
   "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
   "Reasonable", " ", "parameters", " ", "10", " ", "500", " ", "1000", " ", 
    "10", " ", "1", " ", "25"}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"boLogistic", "=", 
   RowBox[{"With", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"nFold", "=", "10"}], ",", 
       RowBox[{"kSubSamplesT", "=", "1000"}], ",", 
       RowBox[{"kSubSamplesV", "=", "1000"}], ",", 
       RowBox[{"mErasT", "=", "25"}], ",", 
       RowBox[{"mErasV", "=", "1"}], ",", 
       RowBox[{"gaussianResolution", "=", "25"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"randomEraSample", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"RandomSample", "[", 
          RowBox[{
           RowBox[{"Range", "[", "eraTotalNumber", "]"}], ",", 
           RowBox[{"mErasT", "+", "mErasV"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"eraSplitTrain", ",", "eraSplitVal"}], "}"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"randomEraSample", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{"1", ";;", "mErasT"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"randomEraSample", "[", 
             RowBox[{"[", "n", "]"}], "]"}], "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"mErasT", "+", "1"}], ";;", 
              RowBox[{"mErasT", "+", "mErasV"}]}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}]}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "eraSplitSubsampleIndexTrain", ",", "eraSplitSubsampleIndexVal"}], 
        "}"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"RandomSample", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{"eraLengths", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"eraSplitTrain", "[", 
                    RowBox[{"[", "n", "]"}], "]"}], "[", 
                   RowBox[{"[", "split", "]"}], "]"}], "]"}], "]"}], "]"}], 
               ",", "kSubSamplesT"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"split", ",", "1", ",", "mErasT"}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Table", "[", 
            RowBox[{
             RowBox[{"RandomSample", "[", 
              RowBox[{
               RowBox[{"Range", "[", 
                RowBox[{"eraLengths", "[", 
                 RowBox[{"[", 
                  RowBox[{
                   RowBox[{"eraSplitVal", "[", 
                    RowBox[{"[", "n", "]"}], "]"}], "[", 
                   RowBox[{"[", "split", "]"}], "]"}], "]"}], "]"}], "]"}], 
               ",", "kSubSamplesV"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"split", ",", "1", ",", "mErasV"}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}]}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"trainingSplits", ",", "valSplits"}], "}"}], "=", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Flatten", "@", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"fullTrainingSplit", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"eraSplitTrain", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "[", 
                  RowBox[{"[", "era", "]"}], "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"eraSplitSubsampleIndexTrain", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], "[", 
                 RowBox[{"[", "era", "]"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"era", ",", "1", ",", "mErasT"}], "}"}]}], "]"}]}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}], ",", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Flatten", "@", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"fullTrainingSplit", "[", 
                RowBox[{"[", 
                 RowBox[{
                  RowBox[{"eraSplitVal", "[", 
                   RowBox[{"[", "n", "]"}], "]"}], "[", 
                  RowBox[{"[", "era", "]"}], "]"}], "]"}], "]"}], "[", 
               RowBox[{"[", 
                RowBox[{
                 RowBox[{"eraSplitSubsampleIndexVal", "[", 
                  RowBox[{"[", "n", "]"}], "]"}], "[", 
                 RowBox[{"[", "era", "]"}], "]"}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"era", ",", "1", ",", "mErasV"}], "}"}]}], "]"}]}], 
           ",", 
           RowBox[{"{", 
            RowBox[{"n", ",", "1", ",", "nFold"}], "}"}]}], "]"}]}], "}"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"crossVal", "[", 
        RowBox[{"n_", ",", 
         RowBox[{"{", 
          RowBox[{"\[Lambda]1_", ",", "\[Lambda]2_"}], "}"}]}], "]"}], ":=", 
       RowBox[{"Module", "[", 
        RowBox[{
         RowBox[{"{", "class", "}"}], ",", 
         RowBox[{
          RowBox[{"class", "=", 
           RowBox[{"Classify", "[", 
            RowBox[{
             RowBox[{"trainingSplits", "[", 
              RowBox[{"[", "n", "]"}], "]"}], ",", 
             RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Quality\>\""}], ",", 
             RowBox[{"Method", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"\"\<LogisticRegression\>\"", ",", 
                RowBox[{
                "\"\<OptimizationMethod\>\"", "\[Rule]", 
                 "\"\<StochasticGradientDescent\>\""}], ",", 
                RowBox[{"\"\<L1Regularization\>\"", "\[Rule]", 
                 RowBox[{"Exp", "[", "\[Lambda]1", "]"}]}], ",", 
                RowBox[{"\"\<L2Regularization\>\"", "\[Rule]", 
                 RowBox[{"Exp", "[", "\[Lambda]2", "]"}]}]}], "}"}]}]}], 
            "]"}]}], ";", "\[IndentingNewLine]", 
          RowBox[{"-", 
           RowBox[{"ClassifierMeasurements", "[", 
            RowBox[{"class", ",", 
             RowBox[{"valSplits", "[", 
              RowBox[{"[", "n", "]"}], "]"}], ",", 
             "\"\<LogLikelihoodRate\>\""}], "]"}]}]}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"lossOptimiserFunction", "[", 
        RowBox[{"{", 
         RowBox[{"\[Lambda]1_", ",", "\[Lambda]2_"}], "}"}], "]"}], ":=", 
       RowBox[{"Mean", "[", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"crossVal", "[", 
           RowBox[{"n", ",", 
            RowBox[{"{", 
             RowBox[{"\[Lambda]1", ",", "\[Lambda]2"}], "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"n", ",", "1", ",", "\[IndentingNewLine]", "nFold"}], 
           "}"}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"regSpace", "[", 
        RowBox[{"init_", ",", "size_"}], "]"}], ":=", 
       RowBox[{"Rectangle", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"init", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "-", "size"}], ",", 
           RowBox[{
            RowBox[{"init", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "-", "size"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"init", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "+", "size"}], ",", 
           RowBox[{
            RowBox[{"init", "[", 
             RowBox[{"[", "2", "]"}], "]"}], "+", "size"}]}], "}"}]}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"BayesianMinimization", "[", 
       RowBox[{"lossOptimiserFunction", ",", 
        RowBox[{"regSpace", "[", 
         RowBox[{"intialRegParameters", ",", "RegSize"}], "]"}], ",", 
        RowBox[{"MaxIterations", "\[Rule]", "gaussianResolution"}], ",", 
        RowBox[{"AssumeDeterministic", "\[Rule]", "False"}]}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
  "Print", "[", 
   "\"\<Cross-validation finished, making predictor function, and getting \
output data\>\"", "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Get", " ", "best", " ", "log"}], "-", 
     RowBox[{"loss", " ", "actually", " ", "calculated"}]}], ",", " ", 
    RowBox[{
     RowBox[{"and", " ", "best", " ", "log"}], "-", 
     RowBox[{
     "loss", " ", "from", " ", "Gaussian", " ", "process", " ", "over", " ", 
      "log"}], "-", "loss"}], ",", " ", 
    RowBox[{"and", " ", "plot", " ", "of", " ", "logloss", " ", "surface"}]}],
    "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"pLogistic", "=", 
  RowBox[{
  "boLogistic", "[", "\"\<PredictorFunction\>\"", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"minConfigValue", "=", 
  RowBox[{"Append", "[", 
   RowBox[{
    RowBox[{"boLogistic", "[", "\"\<MinimumConfiguration\>\"", "]"}], ",", 
    " ", 
    RowBox[{"boLogistic", "[", "\"\<MinimumValue\>\"", "]"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"minConfigFunction", "=", 
  RowBox[{"Quiet", "@", 
   RowBox[{"FindArgMin", "[", 
    RowBox[{
     RowBox[{"pLogistic", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", "x", "}"}], ",", 
       RowBox[{"{", "y", "}"}]}], "}"}]}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"pNet", "=", 
  RowBox[{"Plot3D", "[", 
   RowBox[{
    RowBox[{"pLogistic", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{
       RowBox[{"intialRegParameters", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "-", "RegSize"}], ",", 
      RowBox[{
       RowBox[{"intialRegParameters", "[", 
        RowBox[{"[", "1", "]"}], "]"}], "+", "RegSize"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"y", ",", 
      RowBox[{
       RowBox[{"intialRegParameters", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "-", "RegSize"}], ",", 
      RowBox[{
       RowBox[{"intialRegParameters", "[", 
        RowBox[{"[", "2", "]"}], "]"}], "+", "RegSize"}]}], "}"}], ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "1000"}], ",", 
    RowBox[{"AxesLabel", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
      "\"\<Logloss\>\"", ",", "\"\<Exp[L1]\>\"", ",", "\"\<Exp[L2]\>\""}], 
      "}"}]}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"pNetTable", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"pLogistic", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{
        RowBox[{"intialRegParameters", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "-", "RegSize"}], ",", 
       RowBox[{
        RowBox[{"intialRegParameters", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "+", "RegSize"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", 
       RowBox[{
        RowBox[{"intialRegParameters", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", "RegSize"}], ",", 
       RowBox[{
        RowBox[{"intialRegParameters", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "+", "RegSize"}]}], "}"}]}], "]"}]}],
   "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Exporting\>\"", "]"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"Export", " ", "image", " ", "of", " ", "L1"}], "-", 
     RowBox[{"L2", " ", "logloss", " ", "surface"}]}], ",", " ", 
    RowBox[{
     RowBox[{"and", " ", "L1"}], "-", 
     RowBox[{
     "L2", " ", "values", " ", "with", " ", "best", " ", "logloss"}]}]}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"StringJoin", "[", 
     RowBox[{"dir", ",", "\"\</pNet.pdf\>\""}], "]"}], ",", "pNet"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"StringJoin", "[", 
     RowBox[{"dir", ",", "\"\</minConfigValue.txt\>\""}], "]"}], ",", 
    "minConfigValue"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Export", "[", 
   RowBox[{
    RowBox[{"StringJoin", "[", 
     RowBox[{"dir", ",", "\"\</minConfigFunction.txt\>\""}], "]"}], ",", 
    "minConfigFunction"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Export", "[", 
    RowBox[{
     RowBox[{"StringJoin", "[", 
      RowBox[{"dir", ",", "\"\</pNetTable.txt\>\""}], "]"}], ",", 
     "pNetTable"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Print", "[", "\"\<Closing Kernels\>\"", "]"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "Problem", " ", "closing", " ", "and", " ", "restarting", " ", "parallel",
      " ", "kernels", " ", "under", " ", "linux"}], ",", " ", 
    RowBox[{"hence", "..."}]}], "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"CloseKernels", "[", "]"}], "\n", 
 RowBox[{"Pause", "[", "60", "]"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.74402276229387*^9, 3.744022789024646*^9}, {
   3.744022975291255*^9, 3.744023000945212*^9}, {3.744023474347178*^9, 
   3.744023629717351*^9}, {3.7440236634611883`*^9, 3.7440238174922647`*^9}, {
   3.744023870515613*^9, 3.7440239363758087`*^9}, {3.7440239771388607`*^9, 
   3.744024095731689*^9}, {3.744024168389482*^9, 3.744024169727178*^9}, 
   3.7440245899760647`*^9, {3.7442729516749773`*^9, 3.744272953917156*^9}, 
   3.744273005826442*^9, {3.7442731220126247`*^9, 3.744273153427652*^9}, {
   3.744274256678759*^9, 3.744274259170157*^9}, {3.74427988417131*^9, 
   3.744279936071155*^9}, {3.744279986470982*^9, 3.744280005275251*^9}, {
   3.744280073131665*^9, 3.744280140484248*^9}, {3.7442805297281027`*^9, 
   3.744280556020934*^9}, 3.744285112335005*^9, {3.744285362296709*^9, 
   3.7442854076646748`*^9}, {3.744285743705937*^9, 3.744285751919177*^9}, {
   3.7442859887176647`*^9, 3.744285990051929*^9}, {3.7442864092794743`*^9, 
   3.744286420056574*^9}, 3.744286594791985*^9, 3.744286702023432*^9, {
   3.744286873367321*^9, 3.744286895550623*^9}, 3.744287017625024*^9, 
   3.744287091999297*^9, {3.7442871867005653`*^9, 3.74428719650425*^9}, 
   3.744287244129518*^9, {3.744310145853136*^9, 3.7443101465559464`*^9}, {
   3.744312874768991*^9, 3.744312924321076*^9}, 3.744456924840406*^9, {
   3.744456970658587*^9, 3.7444570441553297`*^9}, {3.744457408797183*^9, 
   3.744457718434733*^9}},ExpressionUUID->"1360be94-0d69-4d0e-81d2-\
9f8dd1eecb8a"],

Cell[BoxData["4"], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.7442870509926367`*^9},
 CellLabel->
  "Out[160]=",ExpressionUUID->"b23972c4-4ac9-468a-a21b-f1fcc1832c65"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["BayesianMinimizationObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.029411764705882353`], {
               FaceForm[{
                 RGBColor[0.929, 0.929, 0.929], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                0.}, {34., 0.}, {34., 34.}, {0., 34.}}}]}, {
               FaceForm[{
                 RGBColor[
                 0.8750000000000001, 0.8750000000000001, 0.8750000000000001], 
                 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYC4v21shbpSwwd8o7+21RtJO6wxM9BOHExgn+R
4R4Tp5aBQ/A0xb5SQ3GHqVc4M5RydB1EEg9f1l4q6qB2qG15OJe2Q8eX29cb
Nws5zNSSACrRhujfJORQ99uq4ByHNkT/RiGHj8lnYr2BfMt0l8z8DUIO9x5w
T17JpO0w00e0x2uVkANQ9gT7Xy0HoK1d8ouFHNyLfvK//K7loLLzT/uX2UIO
Wb6f+4K/aDnsAnJvTxdykDoQreD4UcvBH+jsw5OFHE4ZHdmo907L4WnzvLOr
+oUcdqxnft7zQsvBNTP/Q2unkMNSHWeZ14+0HLrkk99FNQk5ADUnn7mr5XDh
atgb/Wqoez2UHJp6dmZz/vxrL2J/7M5WFyWHvHuFXX1P/tqvbAr0nOug5BBl
oLVS+MJfe5B0i42Sg0vTo+Mzdv+1B7vXXMnhiLhaMOviv/Z3t7bUXDBWctiU
CTLgr/2TxIXXTPSVHObsnjaBv+qvvefcBrVDbgoOEhdcbnz48tn+3cnDTmtf
SjvMYPsg5hHwzl7k9+l3J53F4fwjuSYN2x0Q/DJuFY06HmE4X+ZLTljtOl4H
i1CQAz/bN7Ac7TcsZ3PY8ap4q+jvX/Zrum9nMOSzOfyQv5Qfz/7b/orQJ8fz
aWwOZ2aAHPTbnmEWh/S8ODaHBYJL9x4U/22/pRdkMJuDQk2iUajBb/sF9/fx
zTEGyj+TXf7C47d9xOU9j0Vk2RxkAm9J1yT+tgfp1jzN4PCed5/BzFUMDgzg
hPHV3m526PzVukwOCm9BEo/gfKBngCF3A85n4C0EOvGEfWKZv5zYK0YHBgZg
dJlp2ScDg+39DgSfwQHkQWP747t29LIxODqg81uA0dSwjNHh1ppfMbmtxg46
qZKPIsLFHPi5ty6rfG7kwAOkjr8Uc1jww/DZOlcjeHoHJcNXSPkBPX8AAFks
ZZ0=
                "]]}, {
               FaceForm[{
                 RGBColor[0.769, 0.769, 0.769], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxdlH9QVFUUx9+uywrCNvqEXV2QYIdhlrfQurskm2n3i6JtlpJhYbUZQxqQ
+KsINyJcmfBXqBiUthqSQMwWOogU5DhphArhMNJYQorJavxMgpCBdlvsvtfM
o+nO3D8+d+6555zvOeeGp255bsM0hmEkdC+nW0r37qrkH4wVBjDCCsHYihd3
mT/Wi9y05GTGrREdHl139qkAqRoym3+EdlIL3+qQl9Y/rkSq8fn5XEYYat5M
P3QvV462mZfPNihCUZjZ63GOSOHwDS5d51SDsx5sHNNKEHuiLm5iiUrkrTtl
Fw8aAkUuMmyPCX94FmQvPBRT+6kUd9eq6tsZBaizXxP3+yB9roue+KBi6+IZ
18v90OGXrsm0uck7/ZEG32p/3H7rqyBPq0vkC939H9UGdIpsp6/dkrYQxyf8
8qd5hgy6FiwkM9c+VtecPcUNoQWDqxskYEYKWtZ810y+HvVes/VTpulEtXaQ
kjl8hFIwxxdFX3O4RLZHHH5QlDcmcu7lqIUftjKwCf4ZXNlhOf/ePDmano7b
G5/iIYGFKwZksXJYunMCTz3pIVp6e4dFjubsb4+r9R6Cvs5qt1WOOuHAQ56h
1uY0ObKKeQceEmZOS8jYIkeZWt8VIfeQ+zXPbnRsl+PKZ8toyG5SUjZh6Dml
wO3E/Yc3s6OkRtBjNvpodX5cOUSYBPe9QahEXtV+yDq5dIq1ZXupSTAuCA6H
yOt7Xnvl5vIwRO9WdraNjxLpyvcViXoNLIJAXuIuSzszYNLAKtTLS9bT29PM
GtxsG0+6U+kl1tPnfy9dpMFwLqEt5SWXNsXa66GBTMc/6CUGzjn7aoIGczp5
Ay852jOvqs+iwZGlH9CO8pLFVO2eLg7vUrW6c1g0qiKTfO5wWMD3Zz6Lnxy8
AYfhqktUYRa9vPkQhy9oNqlFLOK+fCL55REOQbx5CYs95p8vbrrPwf7Guazi
IyyEeCc4DPDlOsZiwPLIg3Avh33xKb9dPcHi79ahlu+lOiTw4ThZ7KxHvmu6
DncrjzaF1bA4xrv31WGSdkvkaRZReYXfbPTTYa7Q0CwS6Dhtm6FDrImuMyxq
eTkyY8BXu6siCCnZiaFKbv6/940qZNpyKqPLDSKvGj2QlFUxxTf2eTeM/4f1
m8sl55YZRS61Rzbu6jWiXXPjr7wBJfhpySkw4Xo5HaBkJQ68vS1YwcTjF6E+
EpEF+Sv9sSaLNvSwCZ/z6f2pRvXJjlez9Sbw0/lHVTACip35qzOM4n/x///k
HzNc1Go=
                "]]}, {
               FaceForm[{
                 RGBColor[0.8670000000000001, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{17.5533, 8.}, {
                20.0003, 12.}, {15.0003, 12.}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQBWIQvW5bUv3NvyYOX70i2yzEzB1kTz61X3LfyCHRKNRA
66WNg8f+WlmLdH2HfQfF1YKX2jrE5B79t+m3usOl/Hj2czNtHFpPhhxcoaLs
EHfHjbnitbVDw6PjM3ZP43OQCrwlXeNoicFfsBdkED/EPFdLBxH7Y3e2sgg4
pHUkx95xs3To+Jv6/UmigMP7k4ed1npaOrz4JA+0iscBZDy3iqWDRwuv//op
7A6r7cKjN/63cBAAmZvI5LB+SmpH8l0Lhwl3J7e3Rv20v3Y016Rhu4VDgtcr
FhPBV/Y/F6RvfjXZwoGBQeb1IzOr/RJqwayLixB8kHdXGpvD+d7A4Limagrn
2+pcmfXsrqFDQiPL0X5DqPnTTRwsgM7Y/4bTYVc2588Fz80cBEAeMhV04ARZ
6GXhsOJGfJn/PCGH/4p/v5UesHB40qPxlnefsMPbeTY6V6QsHb7xv9y+vlnE
IQXoe+YIoP8v3XvAPVke4l8XS4dPGwKyZ31XhoRHprkDKDZcMlUdVDTqenau
NnHQ363Oz/1V3eHV1E08hWv0HYBE920PQwduN9VSpigdh/NpV59neZs6/DiU
sirhio6DYbmuonyJpcM9UDAF6zoUAJVnONg4AENjkpWiEQZ/145etg/bzB3A
4SNs6FDdrO+zTMvMYcur4q2it40d0NMPAML+/CU=
                 "], {{33.9996, 
                 27.2068}, {33.9996, 17.928800000000003`}, {
                 31.130599999999998`, 17.8608}, {28.970599999999997`, 
                 17.9438}, {28.427599999999998`, 18.110799999999998`}, {
                 28.427599999999998`, 18.110799999999998`}, {
                 31.495599999999996`, 22.3608}, {33.9996, 27.2068}}}]}, {
               FaceForm[{
                 RGBColor[0.392, 0.392, 0.392], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJVIGYC4m2iv0+/M3Rw2NnL9kGsw9Th2vMs7W/P7SB0
uLHDCi431VIjGwduIMX0y9ChLerynscqlg6rE0KC1B8YOryeuomnUMbMQfD4
rh29xwwdzM9a+110NIao+2LkIHfyqf2SfkOHd68PWCpzmTponRY4vivDwGE/
3xzjRSVmDt9uX28sVtN1uGVbGbFiq4XDscvaqZJO6g5dGx6+nCpk5SDEvXVZ
5XIFh8MpqxJCjKwcZLJ8P/dNlnBouAnU4GHlsKYp0HOug4AD69F+w/Kzlg4c
Sn+/lSYwOSjKf8kJu2vh8CHtKtAn3+01FnRueJhp4XCg8rim1aSn9lURK0zP
3jZ3YGBQeP3ITMp+6f19QBch+Hsfi8ieVDV1EJhxd3J760f7ByBpJzOHA+Y/
DqWs+m//yfF82lV1c4cb+fHs52ZyOPADvbPlurnDktVrb8SbCTo4AaWfe1k4
bAByy/jFHNg/iHkE7LFwUMmpqFqaIw3x3ycLhyMg/zYpOHybDrTnqYXDlw0B
2bPE1RxqmvV9lp2ycPgTk3v0n5C2Q0crMEAXmzuo9JUWSuvqOYDdv9sU4m9b
A4f8Rpaj/YEmDs/tl9zfZ2fkEK8JDOhbhg5c0vPiNGebQuwrMnAw9FnG5WZq
6XAP6KuoyQYOUsXXhT5dtHEwA8XbRgOHiy43PnxhcnBgBBnob+Tg2PTo+IzH
Dg5e1UAHPTNxSIm948bM4OhwaWLMP2crUzgfHB7PzR0AynUF6A==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{9., 25.5}, {9., 24.119}, {7.881, 23.}, {6.5, 23.}, {
                5.119, 23.}, {4., 24.119}, {4., 25.5}, {4., 26.881}, {5.119, 
                28.}, {6.5, 28.}, {7.881, 28.}, {9., 26.881}, {9., 25.5}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{30., 17.5}, {30., 16.119}, {28.881, 15.}, {27.5, 
                15.}, {26.119, 15.}, {25., 16.119}, {25., 17.5}, {25., 
                18.881}, {26.119, 20.}, {27.5, 20.}, {28.881, 20.}, {30., 
                18.881}, {30., 17.5}}}]}}, AspectRatio -> Automatic, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, ImagePadding -> None, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All}, 
             PlotRangeClipping -> True, PlotRangePadding -> None, 
             Ticks -> {None, None}], 
            GridBox[{{
               RowBox[{
                 TagBox[
                 "\"Minimum configuration: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2.293434879538875`"}], ",", 
                    "0.6872573968696152`"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Minimum value: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.6768866412248256`", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              Thickness[0.029411764705882353`], {
               FaceForm[{
                 RGBColor[0.929, 0.929, 0.929], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{0., 
                0.}, {34., 0.}, {34., 34.}, {0., 34.}}}]}, {
               FaceForm[{
                 RGBColor[
                 0.8750000000000001, 0.8750000000000001, 0.8750000000000001], 
                 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJjIGYC4v21shbpSwwd8o7+21RtJO6wxM9BOHExgn+R
4R4Tp5aBQ/A0xb5SQ3GHqVc4M5RydB1EEg9f1l4q6qB2qG15OJe2Q8eX29cb
Nws5zNSSACrRhujfJORQ99uq4ByHNkT/RiGHj8lnYr2BfMt0l8z8DUIO9x5w
T17JpO0w00e0x2uVkANQ9gT7Xy0HoK1d8ouFHNyLfvK//K7loLLzT/uX2UIO
Wb6f+4K/aDnsAnJvTxdykDoQreD4UcvBH+jsw5OFHE4ZHdmo907L4WnzvLOr
+oUcdqxnft7zQsvBNTP/Q2unkMNSHWeZ14+0HLrkk99FNQk5ADUnn7mr5XDh
atgb/Wqoez2UHJp6dmZz/vxrL2J/7M5WFyWHvHuFXX1P/tqvbAr0nOug5BBl
oLVS+MJfe5B0i42Sg0vTo+Mzdv+1B7vXXMnhiLhaMOviv/Z3t7bUXDBWctiU
CTLgr/2TxIXXTPSVHObsnjaBv+qvvefcBrVDbgoOEhdcbnz48tn+3cnDTmtf
SjvMYPsg5hHwzl7k9+l3J53F4fwjuSYN2x0Q/DJuFY06HmE4X+ZLTljtOl4H
i1CQAz/bN7Ac7TcsZ3PY8ap4q+jvX/Zrum9nMOSzOfyQv5Qfz/7b/orQJ8fz
aWwOZ2aAHPTbnmEWh/S8ODaHBYJL9x4U/22/pRdkMJuDQk2iUajBb/sF9/fx
zTEGyj+TXf7C47d9xOU9j0Vk2RxkAm9J1yT+tgfp1jzN4PCed5/BzFUMDgzg
hPHV3m526PzVukwOCm9BEo/gfKBngCF3A85n4C0EOvGEfWKZv5zYK0YHBgZg
dJlp2ScDg+39DgSfwQHkQWP747t29LIxODqg81uA0dSwjNHh1ppfMbmtxg46
qZKPIsLFHPi5ty6rfG7kwAOkjr8Uc1jww/DZOlcjeHoHJcNXSPkBPX8AAFks
ZZ0=
                "]]}, {
               FaceForm[{
                 RGBColor[0.769, 0.769, 0.769], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}}}, CompressedData["
1:eJxdlH9QVFUUx9+uywrCNvqEXV2QYIdhlrfQurskm2n3i6JtlpJhYbUZQxqQ
+KsINyJcmfBXqBiUthqSQMwWOogU5DhphArhMNJYQorJavxMgpCBdlvsvtfM
o+nO3D8+d+6555zvOeeGp255bsM0hmEkdC+nW0r37qrkH4wVBjDCCsHYihd3
mT/Wi9y05GTGrREdHl139qkAqRoym3+EdlIL3+qQl9Y/rkSq8fn5XEYYat5M
P3QvV462mZfPNihCUZjZ63GOSOHwDS5d51SDsx5sHNNKEHuiLm5iiUrkrTtl
Fw8aAkUuMmyPCX94FmQvPBRT+6kUd9eq6tsZBaizXxP3+yB9roue+KBi6+IZ
18v90OGXrsm0uck7/ZEG32p/3H7rqyBPq0vkC939H9UGdIpsp6/dkrYQxyf8
8qd5hgy6FiwkM9c+VtecPcUNoQWDqxskYEYKWtZ810y+HvVes/VTpulEtXaQ
kjl8hFIwxxdFX3O4RLZHHH5QlDcmcu7lqIUftjKwCf4ZXNlhOf/ePDmano7b
G5/iIYGFKwZksXJYunMCTz3pIVp6e4dFjubsb4+r9R6Cvs5qt1WOOuHAQ56h
1uY0ObKKeQceEmZOS8jYIkeZWt8VIfeQ+zXPbnRsl+PKZ8toyG5SUjZh6Dml
wO3E/Yc3s6OkRtBjNvpodX5cOUSYBPe9QahEXtV+yDq5dIq1ZXupSTAuCA6H
yOt7Xnvl5vIwRO9WdraNjxLpyvcViXoNLIJAXuIuSzszYNLAKtTLS9bT29PM
GtxsG0+6U+kl1tPnfy9dpMFwLqEt5SWXNsXa66GBTMc/6CUGzjn7aoIGczp5
Ay852jOvqs+iwZGlH9CO8pLFVO2eLg7vUrW6c1g0qiKTfO5wWMD3Zz6Lnxy8
AYfhqktUYRa9vPkQhy9oNqlFLOK+fCL55REOQbx5CYs95p8vbrrPwf7Guazi
IyyEeCc4DPDlOsZiwPLIg3Avh33xKb9dPcHi79ahlu+lOiTw4ThZ7KxHvmu6
DncrjzaF1bA4xrv31WGSdkvkaRZReYXfbPTTYa7Q0CwS6Dhtm6FDrImuMyxq
eTkyY8BXu6siCCnZiaFKbv6/940qZNpyKqPLDSKvGj2QlFUxxTf2eTeM/4f1
m8sl55YZRS61Rzbu6jWiXXPjr7wBJfhpySkw4Xo5HaBkJQ68vS1YwcTjF6E+
EpEF+Sv9sSaLNvSwCZ/z6f2pRvXJjlez9Sbw0/lHVTACip35qzOM4n/x///k
HzNc1Go=
                "]]}, {
               FaceForm[{
                 RGBColor[0.8670000000000001, 0.067, 0.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{17.5533, 8.}, {
                20.0003, 12.}, {15.0003, 12.}}}]}, {
               FaceForm[{
                 RGBColor[0.749, 0.749, 0.749], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 
                 0}, {1, 3, 3}, {1, 3, 3}}}, {CompressedData["
1:eJxTTMoPSmViYGBQBWIQvW5bUv3NvyYOX70i2yzEzB1kTz61X3LfyCHRKNRA
66WNg8f+WlmLdH2HfQfF1YKX2jrE5B79t+m3usOl/Hj2czNtHFpPhhxcoaLs
EHfHjbnitbVDw6PjM3ZP43OQCrwlXeNoicFfsBdkED/EPFdLBxH7Y3e2sgg4
pHUkx95xs3To+Jv6/UmigMP7k4ed1npaOrz4JA+0iscBZDy3iqWDRwuv//op
7A6r7cKjN/63cBAAmZvI5LB+SmpH8l0Lhwl3J7e3Rv20v3Y016Rhu4VDgtcr
FhPBV/Y/F6RvfjXZwoGBQeb1IzOr/RJqwayLixB8kHdXGpvD+d7A4Limagrn
2+pcmfXsrqFDQiPL0X5DqPnTTRwsgM7Y/4bTYVc2588Fz80cBEAeMhV04ARZ
6GXhsOJGfJn/PCGH/4p/v5UesHB40qPxlnefsMPbeTY6V6QsHb7xv9y+vlnE
IQXoe+YIoP8v3XvAPVke4l8XS4dPGwKyZ31XhoRHprkDKDZcMlUdVDTqenau
NnHQ363Oz/1V3eHV1E08hWv0HYBE920PQwduN9VSpigdh/NpV59neZs6/DiU
sirhio6DYbmuonyJpcM9UDAF6zoUAJVnONg4AENjkpWiEQZ/145etg/bzB3A
4SNs6FDdrO+zTMvMYcur4q2it40d0NMPAML+/CU=
                 "], {{33.9996, 
                 27.2068}, {33.9996, 17.928800000000003`}, {
                 31.130599999999998`, 17.8608}, {28.970599999999997`, 
                 17.9438}, {28.427599999999998`, 18.110799999999998`}, {
                 28.427599999999998`, 18.110799999999998`}, {
                 31.495599999999996`, 22.3608}, {33.9996, 27.2068}}}]}, {
               FaceForm[{
                 RGBColor[0.392, 0.392, 0.392], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0,
                 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJVIGYC4m2iv0+/M3Rw2NnL9kGsw9Th2vMs7W/P7SB0
uLHDCi431VIjGwduIMX0y9ChLerynscqlg6rE0KC1B8YOryeuomnUMbMQfD4
rh29xwwdzM9a+110NIao+2LkIHfyqf2SfkOHd68PWCpzmTponRY4vivDwGE/
3xzjRSVmDt9uX28sVtN1uGVbGbFiq4XDscvaqZJO6g5dGx6+nCpk5SDEvXVZ
5XIFh8MpqxJCjKwcZLJ8P/dNlnBouAnU4GHlsKYp0HOug4AD69F+w/Kzlg4c
Sn+/lSYwOSjKf8kJu2vh8CHtKtAn3+01FnRueJhp4XCg8rim1aSn9lURK0zP
3jZ3YGBQeP3ITMp+6f19QBch+Hsfi8ieVDV1EJhxd3J760f7ByBpJzOHA+Y/
DqWs+m//yfF82lV1c4cb+fHs52ZyOPADvbPlurnDktVrb8SbCTo4AaWfe1k4
bAByy/jFHNg/iHkE7LFwUMmpqFqaIw3x3ycLhyMg/zYpOHybDrTnqYXDlw0B
2bPE1RxqmvV9lp2ycPgTk3v0n5C2Q0crMEAXmzuo9JUWSuvqOYDdv9sU4m9b
A4f8Rpaj/YEmDs/tl9zfZ2fkEK8JDOhbhg5c0vPiNGebQuwrMnAw9FnG5WZq
6XAP6KuoyQYOUsXXhT5dtHEwA8XbRgOHiy43PnxhcnBgBBnob+Tg2PTo+IzH
Dg5e1UAHPTNxSIm948bM4OhwaWLMP2crUzgfHB7PzR0AynUF6A==
                "]], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{9., 25.5}, {9., 24.119}, {7.881, 23.}, {6.5, 23.}, {
                5.119, 23.}, {4., 24.119}, {4., 25.5}, {4., 26.881}, {5.119, 
                28.}, {6.5, 28.}, {7.881, 28.}, {9., 26.881}, {9., 25.5}}}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, {{{30., 17.5}, {30., 16.119}, {28.881, 15.}, {27.5, 
                15.}, {26.119, 15.}, {25., 16.119}, {25., 17.5}, {25., 
                18.881}, {26.119, 20.}, {27.5, 20.}, {28.881, 20.}, {30., 
                18.881}, {30., 17.5}}}]}}, AspectRatio -> Automatic, 
             Axes -> {False, False}, AxesLabel -> {None, None}, 
             AxesOrigin -> {0, 0}, BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, ImagePadding -> None, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             LabelStyle -> {FontFamily -> "Arial"}, 
             Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All}, 
             PlotRangeClipping -> True, PlotRangePadding -> None, 
             Ticks -> {None, None}], 
            GridBox[{{
               RowBox[{
                 TagBox[
                 "\"Minimum configuration: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2.293434879538875`"}], ",", 
                    "0.6872573968696152`"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Minimum value: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.6768866412248256`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of evaluations: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Prediction method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GaussianProcess\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  BayesianMinimizationObject[
   Association["EvaluationHistory" -> Dataset[{
       Association[
       "Configuration" -> {-2.3102125843669405`, 0.02330363443908645}, 
        "Value" -> 0.6934087716061224], 
       Association[
       "Configuration" -> {-2.9068434162460264`, 4.4181293067372955`}, 
        "Value" -> 0.6770794406608247], 
       Association[
       "Configuration" -> {-2.3086055354314308`, 4.9990785388959775`}, 
        "Value" -> 0.6898536299346361], 
       Association[
       "Configuration" -> {4.348345237314147, -2.0190783744841774`}, "Value" -> 
        0.8358038262688341], 
       Association[
       "Configuration" -> {-2.0039183498617863`, 2.2994748767113737`}, 
        "Value" -> 0.6768145613377959], 
       Association[
       "Configuration" -> {-0.9734897312846904, 4.26621044577241}, "Value" -> 
        0.7690120650608653], 
       Association[
       "Configuration" -> {-2.293434879538875, 0.6872573968696152}, "Value" -> 
        0.6767750734808943], 
       Association[
       "Configuration" -> {-2.7498781674812918`, 1.6484428858929974`}, 
        "Value" -> 0.6880982130914356], 
       Association[
       "Configuration" -> {4.466867834743274, 1.6288528892877245`}, "Value" -> 
        0.6789496358765611], 
       Association[
       "Configuration" -> {4.815059667454756, 4.802005982640301}, "Value" -> 
        0.6995451157959545]}, 
      TypeSystem`Vector[
       TypeSystem`Struct[{"Configuration", "Value"}, {
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2], 
         TypeSystem`Atom[Real]}], 10], 
      Association["ID" -> 133444780657826]], "OptimalValue" -> 
    0.6768866412248256, "PredictorFunction" -> PredictorFunction[
      Association[
      "ExampleNumber" -> 10, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 10, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "StandardDeviation" -> {3.1397482586188885`, 
                    2.218223053321274}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{-0.7071067811865474, -0.7071067811865477}, {
                    0.7071067811865477, -0.7071067811865474}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "StandardDeviation" -> {3.1397482586188885`, 
                    2.218223053321274}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.006375, "MaxTrainingMemory" -> 61288, 
                    "DataMemory" -> 272, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 8, 26, 17, 45, 6.228339`7.546947230119365}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 2, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                7263179337424669307]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                "StandardDeviation" -> {3.1397482586188885`, 
                 2.218223053321274}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Numerical"]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 5408312798742616076]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {0.7085340333113925}, 
                "StandardDeviation" -> {0.04981037173525743}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 642863965017912832]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6601973446491019239]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (0.7085340333113925 + 
          0.04981037173525743 #& ), 
         "ProcessorFunction" -> (-14.22462849860381 + 20.07614007209199 #& ), 
         "Name" -> "value", 
         "Quantiles" -> {-0.6375973261010259, 2.5550861903597437`}], "Prior" -> 
       Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
       "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, 
       "Model" -> Association[
        AssumeDeterministic -> False, "EstimationMethod" -> 
         "MaximumPosterior", "NominalCovarianceType" -> "HammingDistance", 
         "NumericalCovarianceType" -> "SquaredExponential", 
         "OptimizationMethod" -> "SimulatedAnnealing", "TrainedGPModel" -> 
         Association[
          "CovarianceFunction" -> 
           Association[
            Method -> "SquaredExponential" + "WN", "HyperParameters" -> {
               Association[
               "NumericalLengthScale" -> 0.39394992926376593`, 
                "SignalVariance" -> 1.3697739385357641`, "NoiseVariance" -> 
                0.13240515527622762`], 
               Association[
               "NumericalLengthScale" -> 29.28610640213226, "SignalVariance" -> 
                0.12954651046641313`, "NoiseVariance" -> 
                0.05666829995186344]}], "MeanFunction" -> Association[], 
           "Purpose" -> Association["task" -> "FunctionOptimization"], 
           "TrainingData" -> {{{-0.8719702737116165, -0.8801548397008181}, \
{-0.8667036175144317, -0.596829668684387}, {-0.7758220552961811, 
             0.09114262553036255}, {-0.4523622420857599, 
             0.9303963853230407}, {
             1.25540966018856, -0.1950280387921623}, {-0.8714658081531794, 
             1.2431289723884635`}, {1.3647098709355925`, 1.159033333711174}, {
             1.2182044656370161`, -1.7516887697756736`}}, \
{-0.30365687262205304`, -0.6375973261010259, -0.6368045623547214, 
             1.2141654366868415`, -0.5939405068501149, -0.37503039479494316`, \
-0.18046276713641574`, 2.5550861903597437`}}, "Nominal-Numerical" -> 
           Association[
            "NumericalVector" -> {{-0.8719702737116165, -0.8801548397008181}, \
{-0.8667036175144317, -0.596829668684387}, {-0.7758220552961811, 
              0.09114262553036255}, {-0.4523622420857599, 
              0.9303963853230407}, {
              1.25540966018856, -0.1950280387921623}, {-0.8714658081531794, 
              1.2431289723884635`}, {1.3647098709355925`, 
              1.159033333711174}, {
              1.2182044656370161`, -1.7516887697756736`}}]], 
         "CholeskyTraining" -> CompressedData["
1:eJxTTMoPSmViYGDggGK19Ck9Zgc/2fftzKi6dO+NfUraUo4Lp1fb24ZP2fH3
/0c7wS9v2dNFG+wcV+S9WOK92I5lfln6BGZPW+O72hvLPpTYMUCB+bfb9YWf
ntsvVyr7Xb34ir379uMP2BWd7Hc63m3TvzjL7uatbMkLloz2yopLVi5fsMQ2
cO/elk9bivcxoAHRWNXHU5k+2c/ZmVt/8vM2+/gF2884Fuywm382j2nRhQn2
IVlNEjv3etpxX5Lj854dZIeuHwaWT2/eorr5k72y14X7Ztt32pUHZa8IY7hv
f2LmWqs3b37YFVsddF7mJIZhPzrwcoGEz9IVz+JiXi3d99TeuUiXP9N+Vofm
gq1s9vaE9MPA1w8cxv3CH+0fRFY0B0U/22dapHiuXpgVp/txgXtMXLFGQPc0
XdLnitu1haD7cYGYuldFIH8BAJezj2o=
          "], "HyperparameterSample" -> {}, 
         "GPModelSample" -> {}, "CholeskySample" -> {}, 
         "FeatureType" -> {"Numerical", "Numerical"}, "InputFeatures" -> {}, 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {0.20994914099845907`, -0.08541953624817847}, 
                "StandardDeviation" -> {1.0146184431041265`, 
                 1.0564463870703606`}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 760100811966314436]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], "Method" -> 
         "GaussianProcess", "Options" -> 
         Association[
          AssumeDeterministic -> 
           Association["Value" -> False, "Options" -> Association[]], 
           "CovarianceType" -> 
           Association[
            "Value" -> Association[
              "Numerical" -> "SquaredExponential", "Nominal" -> 
               "HammingDistance"], "Options" -> Association[]], 
           "EstimationMethod" -> 
           Association[
            "Value" -> "MaximumPosterior", "Options" -> Association[]], 
           "OptimizationMethod" -> 
           Association[
            "Value" -> "SimulatedAnnealing", "Options" -> Association[]], 
           "SearchMethod" -> 
           Association[
            "Value" -> "SimulatedAnnealing", "Options" -> Association[]], 
           "InputFeatures" -> 
           Association["Value" -> {}, "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "StandardDeviation", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> PlusMinus[0., 0.16402306414512258`], 
            "StandardDeviation" -> 
            PlusMinus[0.040971070019608154`, 0.024933725268345367`], 
            "EvaluationTime" -> 0.001163, "TestSize" -> 2, "TrainingSize" -> 
            8, "TrainingTime" -> 0.335438, "TrainingMemory" -> 152688, 
            "ModelMemory" -> 20256, "ExperimentCount" -> 1, "ModelUtility" -> 
            9.224623332893877, "MeanCrossEntropyHistory" -> {
              PlusMinus[0., 0.11598182092801224`]}, 
            "StandardDeviationHistory" -> {
              PlusMinus[0.040971070019608154`, 0.017630806217489376`]}, 
            "Configuration" -> {
             "GaussianProcess", AssumeDeterministic -> False, 
              "CovarianceType" -> {
               None, "Numerical" -> "SquaredExponential", "Nominal" -> 
                "HammingDistance"}, "EstimationMethod" -> "MaximumPosterior", 
              "OptimizationMethod" -> "SimulatedAnnealing", "SearchMethod" -> 
              "SimulatedAnnealing", "InputFeatures" -> {}}], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory", 
             "ModelMemory", "ExperimentCount", "ModelUtility", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Vector[TypeSystem`AnyType, 1], 
             TypeSystem`Tuple[{
               TypeSystem`Atom[String], TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
               TypeSystem`AnyType, TypeSystem`AnyType}]}], 
           Association["ID" -> 116647163563171]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "GaussianProcess", "Options" -> 
              Association[
               AssumeDeterministic -> Association["Value" -> False], 
                "CovarianceType" -> 
                Association[
                 "Value" -> None, "Options" -> 
                  Association[
                   "Numerical" -> 
                    Association["Value" -> "SquaredExponential"], "Nominal" -> 
                    Association["Value" -> "HammingDistance"]]], 
                "EstimationMethod" -> 
                Association["Value" -> "MaximumPosterior"], 
                "OptimizationMethod" -> 
                Association["Value" -> "SimulatedAnnealing"], "SearchMethod" -> 
                Association["Value" -> "SimulatedAnnealing"], "InputFeatures" -> 
                Association["Value" -> {}]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> PlusMinus[0., 0.16402306414512258`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.040971070019608154`, 0.024933725268345367`], 
                 "EvaluationTime" -> 0.001163, "TestSize" -> 2, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.335438, 
                 "TrainingMemory" -> 152688, "ModelMemory" -> 20256, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 9.224623332893877, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0., 0.11598182092801224`]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.040971070019608154`, 0.017630806217489376`]}]},
               "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.001163, "ModelMemory" -> 20256, 
                "StandardDeviation" -> 
                PlusMinus[0.040971070019608154`, 0.024933725268345367`], 
                "TrainingMemory" -> 152688, "TrainingTime" -> 0.3689818], 
              "Index" -> 1]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[String], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value", "Options"}, {TypeSystem`AnyType, 
                 TypeSystem`Assoc[
                  TypeSystem`Atom[String], 
                  TypeSystem`Struct[{"Value"}, {
                    TypeSystem`Atom[String]}], 2]}], 6]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory",
                  "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1], 
                 TypeSystem`Vector[TypeSystem`AnyType, 1]}], 1], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Integer], TypeSystem`AnyType, 
                TypeSystem`Atom[Integer], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 1], 
           Association["ID" -> 116642868595875]], "MaxTrainingSize" -> 10, 
         "PreprocessorEvaluationTime" -> 3.234375`3.*^-6, 
         "PreprocessorMemory" -> 39272, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 8, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
             0.339543, "ExperimentCounts" -> 1]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[116651458530467]], "ID" -> 
            116655753497763]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{4.815059667454756, 4.802005982640301}}, "ID" -> 
              4096411152747321565]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 0.433136, "MaxTrainingMemory" -> 
         233384, "DataMemory" -> 608, "FunctionMemory" -> 118320, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 8, 26, 17, 45, 6.64758`7.575238560055732}, 
           "Instant", "Gregorian", 2.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], 
    "ObjectiveFunction" -> $CellContext`lossOptimiserFunction, 
    "Method" -> {
     "MaxExpectedImprovement", "OptimizationMethod" -> 
      "RandomRestartHillClimbing"}, "SpaceSpecification" -> {
      Rectangle[{-3, -3}, {5, 5}], 
      MachineLearning`PackageScope`RegionSampler[
       Rectangle[{-3, -3}, {5, 5}]]}, 
    "PredictMethod" -> {
     "GaussianProcess", AssumeDeterministic -> False, "OptimizationMethod" -> 
      "SimulatedAnnealing"}, "TimingPredictorFunction" -> PredictorFunction[
      Association[
      "ExampleNumber" -> 10, "Input" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"NumericalVector"}, 
                   "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                   "ExampleWeights" -> Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["ImputeMissing", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Imputer" -> (DimensionReducerFunction[
                  Association[
                  "ExampleNumber" -> 10, "Imputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Fill" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "RandomImputer" -> 
                   MachineLearning`MLProcessor["ImputeMissing", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "StandardDeviation" -> {3.1397482586188885`, 
                    2.218223053321274}, "Method" -> "NaiveSampler", 
                    "VectorLength" -> 2, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                    "NumericalVector"]], "Preprocessor" -> 
                   MachineLearning`MLProcessor["ToMLDataset", 
                    Association[
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Preprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                    True, "Invertibility" -> "Perfect", "Missing" -> 
                    "Allowed"]], "Processor" -> 
                   MachineLearning`MLProcessor["Identity"], "Padder" -> 
                   MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                   MachineLearning`MLProcessor["FromMLDataset", 
                    Association[
                    "DatasetFormat" -> Automatic, "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                    "InversePreprocessor" -> 
                    MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                   "Model" -> 
                   Association[
                    "Matrix" -> {{-0.7071067811865474, -0.7071067811865477}, {
                    0.7071067811865477, -0.7071067811865474}}, "Processor" -> 
                    MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "StandardDeviation" -> {3.1397482586188885`, 
                    2.218223053321274}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                    "FinalDimension" -> 2, "Method" -> "Linear"], 
                   "PerformanceGoal" -> Automatic, "Invertibility" -> 
                   "Approximate", "Log" -> 
                   Association[
                    "TrainingTime" -> 0.007878, "MaxTrainingMemory" -> 61272, 
                    "DataMemory" -> 272, "FunctionMemory" -> 21752, 
                    "LanguageVersion" -> {11.3, 0}, "Date" -> 
                    DateObject[{
                    2018, 8, 26, 17, 45, 6.666827`7.5764941731244475}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 6, 
                    "ProcessorType" -> "x86-64", "OperatingSystem" -> 
                    "MacOSX", "SystemWordLength" -> 64, 
                    "Evaluations" -> {}]]][#, "ImputedVectors", 
                  PerformanceGoal -> "Quality"]& ), "Method" -> 
                "DimensionReduction", "VectorLength" -> 2, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
                7263179337424669307]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                "StandardDeviation" -> {3.1397482586188885`, 
                 2.218223053321274}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
       Association[
        "Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
           Association[
           "Input" -> Association["f1" -> Association["Type" -> "Numerical"]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
              Association["Processors" -> {
                 MachineLearning`MLProcessor["List"], 
                 MachineLearning`MLProcessor["WrapMLDataset", 
                  Association[
                  "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                   "FeatureWeights" -> Automatic, "ExampleWeights" -> 
                   Automatic, "RawExample" -> 
                   Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
            True, "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Output" -> 
            Association[
             "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
            "Processors" -> {
              MachineLearning`MLProcessor["ToVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 5408312798742616076]], 
              MachineLearning`MLProcessor["Standardize", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Mean" -> {1.0784920877874171`}, 
                "StandardDeviation" -> {0.2577321536766083}, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 642863965017912832]], 
              MachineLearning`MLProcessor["FromVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                Association[
                 "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 6601973446491019239]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
                "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
                "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
            "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
         "InverseProcessorFunction" -> (1.0784920877874171` + 
          0.2577321536766083 #& ), 
         "ProcessorFunction" -> (-4.1845461359883895` + 
          3.8799970656930873` #& ), "Name" -> "value", 
         "Quantiles" -> {-0.7555002107121492, 2.4164941808873586`}], "Prior" -> 
       Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
       "PerformanceGoal" -> "Speed", "BatchProcessing" -> Automatic, "Model" -> 
       Association[
        "Trees" -> {}, "ClassNumber" -> 1, "IterationsNumber" -> 0, 
         "Processor" -> MachineLearning`MLProcessor["Sequence", 
           Association[
           "Input" -> Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Output" -> 
            Association[
             "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]],
             "Processors" -> {
              MachineLearning`MLProcessor["DensifyNumericalVector", 
               Association[
               "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]], 
                "Version" -> {11.3, 0}, "ID" -> 8774024264254495944, "Output" -> 
                Association[
                 "f1" -> Association[
                   "Type" -> "NumericalVector", "Weight" -> 1]]]], 
              MachineLearning`MLProcessor["FirstValues", 
               Association[
               "Info" -> Association[
                 "Type" -> "NumericalVector", "Weight" -> 1], "Key" -> "f1", 
                "Invertibility" -> "Perfect", "Missing" -> "Allowed"]]}, 
            "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
         "DistributionData" -> {NormalDistribution, {1.1180339887498973`}}, 
         "Method" -> "GradientBoostedTrees", "Options" -> 
         Association[
          "BoostingMethod" -> 
           Association["Value" -> "Gradient", "Options" -> Association[]], 
           MaxTrainingRounds -> 
           Association["Value" -> 50, "Options" -> Association[]], 
           "LeavesNumber" -> 
           Association["Value" -> 110, "Options" -> Association[]], 
           "LearningRate" -> 
           Association["Value" -> 0.004, "Options" -> Association[]], 
           ValidationSet -> 
           Association["Value" -> Automatic, "Options" -> Association[]], 
           "MaxBinNumber" -> 
           Association["Value" -> 255, "Options" -> Association[]], 
           "ThreadNumber" -> 
           Association["Value" -> 6, "Options" -> Association[]], "MaxDepth" -> 
           Association["Value" -> 6, "Options" -> Association[]], "LeafSize" -> 
           Association["Value" -> 35, "Options" -> Association[]], 
           "FeatureFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFraction" -> 
           Association["Value" -> 1, "Options" -> Association[]], 
           "BaggingFrequency" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "MinGainToSplit" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L1Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "L2Regularization" -> 
           Association["Value" -> 0, "Options" -> Association[]], 
           "LossFunction" -> 
           Association[
            "Value" -> "MeanSquaredError", "Options" -> Association[]]]], 
       "TrainingInformation" -> 
       Association[
        "LossName" -> "StandardDeviation", "BestModelInformation" -> Dataset[
           Association[
           "MeanCrossEntropy" -> 
            PlusMinus[0.010769429889975347`, 0.18317371331390755`], 
            "StandardDeviation" -> 
            PlusMinus[0.24973903494781452`, 0.03171322834682403], 
            "EvaluationTime" -> 0.00006533333333333331, "TestSize" -> 16, 
            "TrainingSize" -> 8, "TrainingTime" -> 0.008605999999999999, 
            "TrainingMemory" -> 54270.22222222222, "ModelMemory" -> 20528., 
            "ExperimentCount" -> 8, "ModelUtility" -> 13.027531646833484`, 
            "MeanCrossEntropyHistory" -> {
              PlusMinus[0.05920247556703351, 0.3010142752148575], 
              PlusMinus[1.2635914258194065`, 1.5335369768276252`], 
              PlusMinus[0., 0.2208191225931552], 
              PlusMinus[0., 0.2500319051571794], 
              PlusMinus[0.0016775541495235302`, 0.2881109795559599], 
              PlusMinus[0., 0.2323017066440803], 
              PlusMinus[0., 0.24511032764286386`], 
              PlusMinus[0., 0.24077498398090283`]}, 
            "StandardDeviationHistory" -> {
              PlusMinus[0.26887052375512194`, 0.055982383264472566`], 
              PlusMinus[0.3820150252425257, 0.11840387505175001`], 
              PlusMinus[0.2146952953940331, 0.08872719539786245], 
              PlusMinus[0.2420609639764803, 0.06564971600868318], 
              PlusMinus[0.25072095754036977`, 0.07120451859443708], 
              PlusMinus[0.22726787437642398`, 0.07618654942283502], 
              PlusMinus[0.23831214504253428`, 0.06800353824181123], 
              PlusMinus[0.2331818486545763, 0.07240809377705346]}, 
            "Configuration" -> {
             "GradientBoostedTrees", "BoostingMethod" -> "Gradient", 
              MaxTrainingRounds -> 50, "LeavesNumber" -> 110, "LearningRate" -> 
              0.004, ValidationSet -> Automatic, "MaxBinNumber" -> 255, 
              "ThreadNumber" -> 6, "MaxDepth" -> 6, "LeafSize" -> 35, 
              "FeatureFraction" -> 1, "BaggingFraction" -> 1, 
              "BaggingFrequency" -> 0, "MinGainToSplit" -> 0, 
              "L1Regularization" -> 0, "L2Regularization" -> 0, 
              "LossFunction" -> "MeanSquaredError"}, "FinalTrainingSize" -> 
            10], 
           
           TypeSystem`Struct[{
            "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
             "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory", 
             "ModelMemory", "ExperimentCount", "ModelUtility", 
             "MeanCrossEntropyHistory", "StandardDeviationHistory", 
             "Configuration", "FinalTrainingSize"}, {
            TypeSystem`AnyType, TypeSystem`AnyType, 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real], 
             TypeSystem`Vector[TypeSystem`AnyType, 8], 
             TypeSystem`Vector[TypeSystem`AnyType, 8], 
             TypeSystem`Vector[TypeSystem`AnyType, 17], 
             TypeSystem`Atom[Integer]}], 
           Association["ID" -> 261529295359140]], "Configurations" -> 
         Dataset[
           Association[
           Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.027297711153883766`, 0.16518129484769625`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.25118306654217865`, 0.031227380290325395`], 
                 "EvaluationTime" -> 0.00010294444444444445`, "TestSize" -> 
                 16, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.0048335555555555545`, "TrainingMemory" -> 
                 56844.44444444444, "ModelMemory" -> 14904., 
                 "ExperimentCount" -> 8, "ModelUtility" -> 
                 11.370751868358324`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.08082198207170956, 0.3092947411079096], 
                   PlusMinus[1.0559710263556863`, 1.313857367399484], 
                   PlusMinus[0., 0.24808757423708241`], 
                   PlusMinus[0.029357948468380583`, 0.2766272073420704], 
                   PlusMinus[0.03684043263084491, 0.2975440887889768], 
                   PlusMinus[0., 0.25773477842661086`], 
                   PlusMinus[0.012784509539814248`, 0.26789199267055563`], 
                   PlusMinus[0.010607597381135037`, 0.26739100332837834`]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2685640824349037, 0.05580763662725886], 
                   PlusMinus[0.3829141901680941, 0.11894931963250613`], 
                   PlusMinus[0.214889294546528, 0.08853184140020162], 
                   PlusMinus[0.24802656061977912`, 0.062149564277862855`], 
                   PlusMinus[0.2503856326195211, 0.07124337627535728], 
                   PlusMinus[0.22810369735690483`, 0.07551112954705155], 
                   PlusMinus[0.23921645981627632`, 0.06745573681728272], 
                   PlusMinus[0.23915131636076692`, 0.06791379521688165]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010294444444444445`, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.25118306654217865`, 0.031227380290325395`], 
                "TrainingMemory" -> 56844.44444444444, "TrainingTime" -> 
                0.00531691111111111], "Index" -> 1], 
            Association[
             "Value" -> "DecisionTree", "Options" -> 
              Association[
               "DistributionSmoothing" -> Association["Value" -> 1], 
                "FeatureFraction" -> Association["Value" -> 1]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.054371087315408254`, 0.3140725537504542], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2823922232876031, 0.033302987355808535`], 
                 "EvaluationTime" -> 0.0000958333333333333, "TestSize" -> 16, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.003485222222222222, 
                 "TrainingMemory" -> 61407.11111111111, "ModelMemory" -> 
                 5394.666666666666, "ExperimentCount" -> 8, "ModelUtility" -> 
                 10.339097275775915`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.045583916468481034`, 0.3091410573884795], 
                   PlusMinus[1.9610953482846454`, 2.349030280507407], 
                   PlusMinus[0., 0.18513367325578595`], 
                   PlusMinus[1.7782296718265795`, 1.2695309254171239`], 
                   PlusMinus[0.002974480111675559, 0.333010548870144], 
                   PlusMinus[0., 0.21649134229726513`], 
                   PlusMinus[0.17068915098142926`, 0.3848928119590294], 
                   PlusMinus[0.3748010843359857, 0.539348976858288]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2701017899105179, 0.057290890943781925`], 
                   PlusMinus[0.4002344377843241, 0.14034267337253933`], 
                   PlusMinus[0.21827660582698746`, 0.08524885431513386], 
                   PlusMinus[0.39380181845914275`, 0.06401180865683423], 
                   PlusMinus[0.2613308453417032, 0.07108096371710607], 
                   PlusMinus[0.23944783624401464`, 0.06730085868286348], 
                   PlusMinus[0.27530976924465295`, 0.05238488072867869], 
                   PlusMinus[0.27046305852026764`, 0.05221725422810671]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0000958333333333333, "ModelMemory" -> 
                5394.666666666666, "StandardDeviation" -> 
                PlusMinus[0.2823922232876031, 0.033302987355808535`], 
                "TrainingMemory" -> 61407.11111111111, "TrainingTime" -> 
                0.0038337444444444444`], "Index" -> 2], 
            Association[
             "Value" -> "RandomForest", "Options" -> 
              Association[
               "FeatureFraction" -> Association["Value" -> Automatic], 
                "LeafSize" -> Association["Value" -> Automatic], "TreeNumber" -> 
                Association["Value" -> Automatic], "DistributionSmoothing" -> 
                Association["Value" -> 0.5], "Implementation" -> 
                Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.15487720696067553`, 0.22849115317367397`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2855739814855831, 0.03843616497667291], 
                 "EvaluationTime" -> 0.0004755555555555555, "TestSize" -> 16, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.004312888888888889, 
                 "TrainingMemory" -> 72096., "ModelMemory" -> 38696., 
                 "ExperimentCount" -> 8, "ModelUtility" -> 6.350668276446899, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.12501779903529253`, 0.3290790979434929], 
                   PlusMinus[1.5424836266009614`, 1.9407813298143264`], 
                   PlusMinus[0.13779448534234473`, 0.33490340844731603`], 
                   PlusMinus[0.7706084078942912, 0.691000504813536], 
                   PlusMinus[0.12373864369156064`, 0.36304150460444623`], 
                   PlusMinus[0.08227542739908089, 0.31733929295321306`], 
                   PlusMinus[0.18375622136110992`, 0.37779629864176784`], 
                   PlusMinus[0.10469310333959127`, 0.3250280331585786]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2635039512352089, 0.056104963894877104`], 
                   PlusMinus[0.417782655986146, 0.1599598821725165], 
                   PlusMinus[0.21400418653198092`, 0.08888836488617234], 
                   PlusMinus[0.44428538848495125`, 0.08195317706068879], 
                   PlusMinus[0.28325904999598983`, 0.06504133096821176], 
                   PlusMinus[0.2585578684752081, 0.06685312746376099], 
                   PlusMinus[0.2809111708896629, 0.07226341806024666], 
                   PlusMinus[0.266485864733491, 0.06033634597248797]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0004755555555555555, "ModelMemory" -> 
                38696., "StandardDeviation" -> 
                PlusMinus[0.2855739814855831, 0.03843616497667291], 
                "TrainingMemory" -> 72096., "TrainingTime" -> 
                0.0047441777777777775`], "Index" -> 3], 
            Association[
             "Value" -> "NearestNeighbors", "Options" -> 
              Association[
               "NeighborsNumber" -> Association["Value" -> Automatic], 
                "DistributionSmoothing" -> Association["Value" -> 0.5], 
                "NearestMethod" -> Association["Value" -> Automatic]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.10994462172304638`, 0.2529574638196217], 
                 "StandardDeviation" -> 
                 PlusMinus[0.28913009088387376`, 0.03707850318080131], 
                 "EvaluationTime" -> 0.00009444444444444444, "TestSize" -> 16,
                  "TrainingSize" -> 8, "TrainingTime" -> 0.002853777777777777,
                  "TrainingMemory" -> 64152.88888888888, "ModelMemory" -> 
                 6000., "ExperimentCount" -> 8, "ModelUtility" -> 
                 10.120533568558164`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.0820220850377722, 0.30550664388475035`], 
                   PlusMinus[1.450954562215746, 1.9366123106877697`], 
                   PlusMinus[0.025922331606892838`, 0.27738687137881857`], 
                   PlusMinus[1.2827718506919263`, 1.2214738359959454`], 
                   PlusMinus[0.055855140181850116`, 0.3069137864559787], 
                   PlusMinus[0.09801992788075298, 0.3134263449616474], 
                   PlusMinus[0.8621816721495927, 1.1526099410271107`], 
                   PlusMinus[0.1705076036995228, 0.4008500116298799]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2670077362178674, 0.0539331977432487], 
                   PlusMinus[0.4061045865279666, 0.1466726065143801], 
                   PlusMinus[0.23457835311551137`, 0.07277761734699202], 
                   PlusMinus[0.430890755821436, 0.0952954108929186], 
                   PlusMinus[0.2525992571689077, 0.07113495453470586], 
                   PlusMinus[0.268874178959447, 0.05283923189141035], 
                   PlusMinus[0.38309496977112156`, 0.12524226652958229`], 
                   PlusMinus[0.3105895141440739, 0.06338773566997821]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00009444444444444444, "ModelMemory" -> 
                6000., "StandardDeviation" -> 
                PlusMinus[0.28913009088387376`, 0.03707850318080131], 
                "TrainingMemory" -> 64152.88888888888, "TrainingTime" -> 
                0.003139155555555555], "Index" -> 4], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.00001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.07787903749283596, 0.19735023752687833`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2874957106357323, 0.03602355610037683], 
                 "EvaluationTime" -> 0.0001016111111111111, "TestSize" -> 16, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.004642444444444444, 
                 "TrainingMemory" -> 56830.22222222221, "ModelMemory" -> 
                 14904., "ExperimentCount" -> 8, "ModelUtility" -> 
                 9.97030610041407, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.07241444268133201, 0.3005707579622093], 
                   PlusMinus[1.1988117330066965`, 1.4591082926731573`], 
                   PlusMinus[0., 0.25094285579615305`], 
                   PlusMinus[0.727928902959577, 0.702623267222388], 
                   PlusMinus[0.026838954993821718`, 0.29013835896145174`], 
                   PlusMinus[0.013883770368162907`, 0.2685149091114739], 
                   PlusMinus[0.048062868040206645`, 0.2955581884501106], 
                   PlusMinus[0.4742701610503244, 0.5545039760029733]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2664375622883617, 0.05421293265022028], 
                   PlusMinus[0.3934093509605448, 0.12669929057849885`], 
                   PlusMinus[0.22077822074224124`, 0.08304501673168678], 
                   PlusMinus[0.4009108227422154, 0.076378528531087], 
                   PlusMinus[0.24701602850235427`, 0.07174190587970238], 
                   PlusMinus[0.240882879296669, 0.06641272192218883], 
                   PlusMinus[0.2564925117300951, 0.06304880427268715], 
                   PlusMinus[0.36082813349794945`, 0.06561649203976211]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0001016111111111111, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.2874957106357323, 0.03602355610037683], 
                "TrainingMemory" -> 56830.22222222221, "TrainingTime" -> 
                0.0051066888888888886`], "Index" -> 5], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.01], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.07786196137994612, 0.1972233899626294], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2875045080407942, 0.03599176775072842], 
                 "EvaluationTime" -> 0.00010077777777777776`, "TestSize" -> 
                 16, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.004592666666666666, "TrainingMemory" -> 
                 56801.777777777774`, "ModelMemory" -> 14904., 
                 "ExperimentCount" -> 8, "ModelUtility" -> 9.994074719153504, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.0724172287007645, 0.3005757046930819], 
                   PlusMinus[1.1986627891494552`, 1.458943535634092], 
                   PlusMinus[0., 0.2509214418621857], 
                   PlusMinus[0.7254767908585686, 0.7009665329645433], 
                   PlusMinus[0.026849434790932047`, 0.2901462300538841], 
                   PlusMinus[0.0138242460636826, 0.2684836322038388], 
                   PlusMinus[0.047973326824305225`, 0.2954890158904334], 
                   PlusMinus[0.4732682944161706, 0.5538554620692634]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2664384012176503, 0.05421451746205132], 
                   PlusMinus[0.3933957749999381, 0.12668741069517053`], 
                   PlusMinus[0.22076226044003774`, 0.08305884185765744], 
                   PlusMinus[0.4005079730049521, 0.07618842392687544], 
                   PlusMinus[0.24701970530224576`, 0.07174127062585822], 
                   PlusMinus[0.2408610647296124, 0.0664265426428072], 
                   PlusMinus[0.25646322879716693`, 0.0630498493806386], 
                   PlusMinus[0.36063223987819054`, 0.06554489550084523]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010077777777777776`, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.2875045080407942, 0.03599176775072842], 
                "TrainingMemory" -> 56801.777777777774`, "TrainingTime" -> 
                0.005051933333333333], "Index" -> 6], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 100000.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.025268424238113686`, 0.16385388058805692`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.24974036144463, 0.031712720623838335`], 
                 "EvaluationTime" -> 0.00010383333333333334`, "TestSize" -> 
                 16, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.004705888888888888, "TrainingMemory" -> 56823.1111111111, 
                 "ModelMemory" -> 14904., "ExperimentCount" -> 8, 
                 "ModelUtility" -> 11.402001078057554`, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.0820621635580816, 0.3104476273701373], 
                   PlusMinus[1.0420685042967415`, 1.3005174967719688`], 
                   PlusMinus[0., 0.24888258625322257`], 
                   PlusMinus[0.020174972413536052`, 0.27178596461140814`], 
                   PlusMinus[0.037868482354018296`, 0.2982997877538262], 
                   PlusMinus[0., 0.2580102609618851], 
                   PlusMinus[0.01307806567912384, 0.26797536588722737`], 
                   PlusMinus[0.0038982950772841196`, 0.2643371159010289]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.26887018116405753`, 0.055982189661066606`], 
                   PlusMinus[0.3820160028441898, 0.11840445942476406`], 
                   PlusMinus[0.21469549244676206`, 0.0887269965100412], 
                   PlusMinus[0.24206714824314737`, 0.065645875416534], 
                   PlusMinus[0.25072058908327727`, 0.07120456016644158], 
                   PlusMinus[0.22726876836324858`, 0.07618582074389732], 
                   PlusMinus[0.2383130748636428, 0.0680029433017024], 
                   PlusMinus[0.23318778189013428`, 0.07240335198151414]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010383333333333334`, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.24974036144463, 0.031712720623838335`], 
                "TrainingMemory" -> 56823.1111111111, "TrainingTime" -> 
                0.005176477777777777], "Index" -> 7], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 10.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.05050108107311572, 0.17238280978473544`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2668603715801345, 0.029232051507928427`], 
                 "EvaluationTime" -> 0.0001072222222222222, "TestSize" -> 16, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.004691111111111111, 
                 "TrainingMemory" -> 56837.33333333333, "ModelMemory" -> 
                 14904., "ExperimentCount" -> 8, "ModelUtility" -> 
                 10.60749250647091, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.07591343347052959, 0.3045677611324762], 
                   PlusMinus[1.1203084768558715`, 1.3769700384203234`], 
                   PlusMinus[0., 0.24650617940214944`], 
                   PlusMinus[0.13750788590614804`, 0.33529544240197545`], 
                   PlusMinus[0.032257527879688164`, 0.29416707427613636`], 
                   PlusMinus[0., 0.2590733050779432], 
                   PlusMinus[0.01869432921312364, 0.27276351593765297`], 
                   PlusMinus[0.11473395844651411`, 0.3245729456518629]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2673447820716222, 0.05505434013438502], 
                   PlusMinus[0.38724929383422046`, 0.12182131784542793`], 
                   PlusMinus[0.21627970066106766`, 0.08716056200173226], 
                   PlusMinus[0.2867136978682145, 0.0482543188888295], 
                   PlusMinus[0.24886998436995794`, 0.07144431977169677], 
                   PlusMinus[0.2325864990405435, 0.07207349539697519], 
                   PlusMinus[0.24492374909192208`, 0.06497901489284641], 
                   PlusMinus[0.2800997640680976, 0.05056694514987861]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.0001072222222222222, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.2668603715801345, 0.029232051507928427`], 
                "TrainingMemory" -> 56837.33333333333, "TrainingTime" -> 
                0.005160222222222222], "Index" -> 8], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.0001], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.07787888348519661, 0.19734909107589202`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2874957903768893, 0.036023269090630555`], 
                 "EvaluationTime" -> 0.00010744444444444443`, "TestSize" -> 
                 16, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.0048954444444444445`, "TrainingMemory" -> 
                 56787.55555555555, "ModelMemory" -> 14904., 
                 "ExperimentCount" -> 8, "ModelUtility" -> 9.80994224335536, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.07241446751027936, 0.300570802252335], 
                   PlusMinus[1.1988103940996004`, 1.4591068108510112`], 
                   PlusMinus[0., 0.25094266255228553`], 
                   PlusMinus[0.7279067624769342, 0.7026083052163609], 
                   PlusMinus[0.026839049556692363`, 0.29013842998746375`], 
                   PlusMinus[0.013883232594226191`, 0.26851462653707137`], 
                   PlusMinus[0.04806205790266138, 0.295557562645955], 
                   PlusMinus[0.4742611158538035, 0.5544981219017405]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2664375697715832, 0.05421294688397303], 
                   PlusMinus[0.39340922886933344`, 0.12669918365124352`], 
                   PlusMinus[0.2207780767682497, 0.08304514142232562], 
                   PlusMinus[0.4009071860022212, 0.07637681148260715], 
                   PlusMinus[0.24701606168145962`, 0.0717419001467689], 
                   PlusMinus[0.24088268228392215`, 0.06641284671598631], 
                   PlusMinus[0.2564922468670411, 0.06304881366916558], 
                   PlusMinus[0.3608263651429541, 0.06561584569937512]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010744444444444443`, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.2874957903768893, 0.036023269090630555`], 
                "TrainingMemory" -> 56787.55555555555, "TrainingTime" -> 
                0.005384988888888889], "Index" -> 9], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 0.1], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.07770310948259976, 0.19612240858993935`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2875752791016421, 0.03571244454583389], 
                 "EvaluationTime" -> 0.00010594444444444442`, "TestSize" -> 
                 16, "TrainingSize" -> 8, "TrainingTime" -> 
                 0.00473511111111111, "TrainingMemory" -> 56794.666666666664`,
                  "ModelMemory" -> 14904., "ExperimentCount" -> 8, 
                 "ModelUtility" -> 9.849536919699176, 
                 "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.07244302430745365, 0.30062051427966896`], 
                   PlusMinus[1.1973315660875838`, 1.4574731214612415`], 
                   PlusMinus[0., 0.2507339089468267], 
                   PlusMinus[0.703967641903277, 0.6864715151578381], 
                   PlusMinus[0.026942990134954718`, 0.29021647522884897`], 
                   PlusMinus[0.013298733542578933`, 0.26820751360391026`], 
                   PlusMinus[0.047180743423133505`, 0.2948766172554416], 
                   PlusMinus[0.4643778834094976, 0.5480977783611488]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2664461023084259, 0.05422867238444988], 
                   PlusMinus[0.3932749511486553, 0.12658190874167866`], 
                   PlusMinus[0.2206219425239833, 0.08318060842606657], 
                   PlusMinus[0.3969676343563026, 0.07452839205585061], 
                   PlusMinus[0.24705250863050698`, 0.07173560876885199], 
                   PlusMinus[0.24066776923495695`, 0.06654923829352967], 
                   PlusMinus[0.2562032522434118, 0.0630598693283468], 
                   PlusMinus[0.35889148041224733`, 0.06491109226245013]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00010594444444444442`, "ModelMemory" -> 
                14904., "StandardDeviation" -> 
                PlusMinus[0.2875752791016421, 0.03571244454583389], 
                "TrainingMemory" -> 56794.666666666664`, "TrainingTime" -> 
                0.005208622222222221], "Index" -> 10], 
            Association[
             "Value" -> "GradientBoostedTrees", "Options" -> 
              Association[
               "BoostingMethod" -> Association["Value" -> "Gradient"], 
                MaxTrainingRounds -> Association["Value" -> 50], 
                "LeavesNumber" -> Association["Value" -> 110], "LearningRate" -> 
                Association["Value" -> 0.004], ValidationSet -> 
                Association["Value" -> Automatic], "MaxBinNumber" -> 
                Association["Value" -> 255], "ThreadNumber" -> 
                Association["Value" -> 6], "MaxDepth" -> 
                Association["Value" -> 6], "LeafSize" -> 
                Association["Value" -> 35], "FeatureFraction" -> 
                Association["Value" -> 1], "BaggingFraction" -> 
                Association["Value" -> 1], "BaggingFrequency" -> 
                Association["Value" -> 0], "MinGainToSplit" -> 
                Association["Value" -> 0], "L1Regularization" -> 
                Association["Value" -> 0], "L2Regularization" -> 
                Association["Value" -> 0], "LossFunction" -> 
                Association["Value" -> "MeanSquaredError"]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.010769429889975347`, 0.18317371331390755`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.24973903494781452`, 0.03171322834682403], 
                 "EvaluationTime" -> 0.00006533333333333331, "TestSize" -> 16,
                  "TrainingSize" -> 8, "TrainingTime" -> 0.008605999999999999,
                  "TrainingMemory" -> 54270.22222222222, "ModelMemory" -> 
                 20528., "ExperimentCount" -> 8, "ModelUtility" -> 
                 13.027531646833484`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.05920247556703351, 0.3010142752148575], 
                   PlusMinus[1.2635914258194065`, 1.5335369768276252`], 
                   PlusMinus[0., 0.2208191225931552], 
                   PlusMinus[0., 0.2500319051571794], 
                   PlusMinus[0.0016775541495235302`, 0.2881109795559599], 
                   PlusMinus[0., 0.2323017066440803], 
                   PlusMinus[0., 0.24511032764286386`], 
                   PlusMinus[0., 0.24077498398090283`]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.26887052375512194`, 0.055982383264472566`], 
                   PlusMinus[0.3820150252425257, 0.11840387505175001`], 
                   PlusMinus[0.2146952953940331, 0.08872719539786245], 
                   PlusMinus[0.2420609639764803, 0.06564971600868318], 
                   PlusMinus[0.25072095754036977`, 0.07120451859443708], 
                   PlusMinus[0.22726787437642398`, 0.07618654942283502], 
                   PlusMinus[0.23831214504253428`, 0.06800353824181123], 
                   PlusMinus[0.2331818486545763, 0.07240809377705346]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.00006533333333333331, "ModelMemory" -> 
                20528., "StandardDeviation" -> 
                PlusMinus[0.24973903494781452`, 0.03171322834682403], 
                "TrainingMemory" -> 54270.22222222222, "TrainingTime" -> 
                0.009466599999999999], "Index" -> 11], 
            Association[
             "Value" -> "LinearRegression", "Options" -> 
              Association[
               "L1Regularization" -> Association["Value" -> 0], 
                "L2Regularization" -> Association["Value" -> 1.], 
                "OptimizationMethod" -> Association["Value" -> Automatic], 
                MaxIterations -> Association["Value" -> 30]]] -> 
            Association["Experiments" -> {
                Association[
                "MeanCrossEntropy" -> 
                 PlusMinus[0.07275196591639443, 0.42579428453185075`], 
                 "StandardDeviation" -> 
                 PlusMinus[0.2665333017072922, 0.07687516568515473], 
                 "EvaluationTime" -> 0.000107, "TestSize" -> 2, 
                 "TrainingSize" -> 8, "TrainingTime" -> 0.004802, 
                 "TrainingMemory" -> 56656, "ModelMemory" -> 14904, 
                 "ExperimentCount" -> 1, "ModelUtility" -> 
                 10.267452698542598`, "MeanCrossEntropyHistory" -> {
                   PlusMinus[0.07275196591639443, 0.3010820259829459]}, 
                 "StandardDeviationHistory" -> {
                   PlusMinus[0.2665333017072922, 0.054358950960812294`]}]}, 
              "PredictedPerformances" -> 
              Association[
               "EvaluationTime" -> 0.000107, "ModelMemory" -> 14904, 
                "StandardDeviation" -> 
                PlusMinus[0.2665333017072922, 0.07687516568515473], 
                "TrainingMemory" -> 56656, "TrainingTime" -> 0.0052822], 
              "Index" -> 12]], 
           TypeSystem`Assoc[
            TypeSystem`Struct[{"Value", "Options"}, {
              TypeSystem`Atom[
               TypeSystem`Enumeration[
               "DecisionTree", "GradientBoostedTrees", "LinearRegression", 
                "NearestNeighbors", "RandomForest"]], 
              TypeSystem`Assoc[TypeSystem`AnyType, 
               TypeSystem`Struct[{"Value"}, {TypeSystem`AnyType}], 
               TypeSystem`AnyLength]}], 
            
            TypeSystem`Struct[{
             "Experiments", "PredictedPerformances", "Index"}, {
              TypeSystem`Vector[
               
               TypeSystem`Struct[{
                "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
                 "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory",
                  "ModelMemory", "ExperimentCount", "ModelUtility", 
                 "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
                TypeSystem`AnyType, TypeSystem`AnyType, 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Atom[Integer], 
                 TypeSystem`Atom[Real], 
                 TypeSystem`Vector[TypeSystem`AnyType, TypeSystem`AnyLength], 
                 
                 TypeSystem`Vector[
                 TypeSystem`AnyType, TypeSystem`AnyLength]}], 1], 
              
              TypeSystem`Struct[{
               "EvaluationTime", "ModelMemory", "StandardDeviation", 
                "TrainingMemory", "TrainingTime"}, {
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real], TypeSystem`AnyType, 
                TypeSystem`Atom[Real], 
                TypeSystem`Atom[Real]}], 
              TypeSystem`Atom[Integer]}], 12], 
           Association["ID" -> 261525000391844]], "MaxTrainingSize" -> 10, 
         "PreprocessorEvaluationTime" -> 3.794921875`2.*^-6, 
         "PreprocessorMemory" -> 39272, "RoundPartitioning" -> Dataset[{
            Association[
            "TrainingSizes" -> 8, "TimeBudgets" -> 1., "ElapsedTimes" -> 
             1.101589, "ExperimentCounts" -> 89]}, 
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
              "ExperimentCounts"}, {
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer]}], 1], 
           Association[
           "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
              Dataset`DatasetHandle[261533590326436]], "ID" -> 
            261537885293732]]], "Log" -> 
       Association["Example" -> MachineLearning`MLDataset[
           Association[
           "f1" -> Association[
             "Type" -> "NumericalVector", "Weight" -> 1, 
              "Values" -> {{4.815059667454756, 4.802005982640301}}, "ID" -> 
              4096411152747321565]], 
           Association[
           "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> 
            False]], "TrainingTime" -> 1.513355, "MaxTrainingMemory" -> 
         833880, "DataMemory" -> 608, "FunctionMemory" -> 215720, 
         "LanguageVersion" -> {11.3, 0}, "Date" -> 
         DateObject[{2018, 8, 26, 17, 45, 8.165527`7.6645592061554675}, 
           "Instant", "Gregorian", 2.], "ProcessorCount" -> 6, 
         "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
         "SystemWordLength" -> 64, "Evaluations" -> {}]]], 
    "TimingEvaluationHistory" -> Dataset[{
       Association[
       "Configuration" -> {-2.3102125843669405`, 0.02330363443908645}, 
        "Value" -> 1.0645941784756106`], 
       Association[
       "Configuration" -> {-2.9068434162460264`, 4.4181293067372955`}, 
        "Value" -> 1.3703588120292247`], 
       Association[
       "Configuration" -> {-2.3086055354314308`, 4.9990785388959775`}, 
        "Value" -> 0.9015205883626775], 
       Association[
       "Configuration" -> {4.348345237314147, -2.0190783744841774`}, "Value" -> 
        1.198658508436499], 
       Association[
       "Configuration" -> {-2.0039183498617863`, 2.2994748767113737`}, 
        "Value" -> 0.9287602631133456], 
       Association[
       "Configuration" -> {-0.9734897312846904, 4.26621044577241}, "Value" -> 
        1.7013003373745075`], 
       Association[
       "Configuration" -> {-2.293434879538875, 0.6872573968696152}, "Value" -> 
        0.9438872216899087], 
       Association[
       "Configuration" -> {-2.7498781674812918`, 1.6484428858929974`}, 
        "Value" -> 0.8837753913774435], 
       Association[
       "Configuration" -> {4.466867834743274, 1.6288528892877245`}, "Value" -> 
        0.9059025611831129], 
       Association[
       "Configuration" -> {4.815059667454756, 4.802005982640301}, "Value" -> 
        0.8861630158318393]}, 
      TypeSystem`Vector[
       TypeSystem`Struct[{"Configuration", "Value"}, {
         TypeSystem`Vector[
          TypeSystem`Atom[Real], 2], 
         TypeSystem`Atom[Real]}], 10], 
      Association["ID" -> 133449075625122]]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287108189274*^9},
 CellLabel->
  "Out[168]=",ExpressionUUID->"1650214b-24ff-456d-a113-6442fe902a65"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["PredictorFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GaussianProcess\"", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{{}, {{}, {
                PointSize[0.125], 
                GrayLevel[0.55], 
                
                PointBox[{{-1, 1.5}, {0, 2.3}, {1, 0.8}, {2, 2}, {3, 1.3}, {
                  4, 4.}}]}, {
                GrayLevel[0.7], 
                AbsoluteThickness[1.5], 
                
                BSplineCurveBox[{{-1, 2}, {0, 2}, {1, 1}, {2, 1}, {4, 2}, {5, 
                 4}}]}}, {}}, Axes -> {False, False}, 
             AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, 
             BaseStyle -> {FontFamily -> "Arial", 
               AbsoluteThickness[1.5]}, DisplayFunction -> Identity, 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
             Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], FrameTicks -> {{None, None}, {None, None}}, 
             GridLines -> {None, None}, LabelStyle -> {FontFamily -> "Arial"},
              Method -> {"ScalingFunctions" -> None}, PlotRange -> {All, All},
              PlotRangeClipping -> True, PlotRangePadding -> {{1, 1}, {1, 1}},
              Ticks -> {None, None}, Axes -> False, AspectRatio -> 1, 
             ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], Background -> 
             GrayLevel[0.94]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Input type: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TemplateBox[{"\"NumericalVector\"", 
                    StyleBox[
                    
                    TemplateBox[{"\" (length: \"", "2", "\")\""}, 
                    "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"GaussianProcess\"", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                 "\"Number of training examples: \"", 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox["10", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  PredictorFunction[
   Association[
   "ExampleNumber" -> 10, "Input" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Length" -> 2]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"NumericalVector"}, "FeatureKeys" -> {"f1"},
                 "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic,
                 "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ImputeMissing", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Imputed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Imputer" -> (DimensionReducerFunction[
               Association[
               "ExampleNumber" -> 10, "Imputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Fill" -> {-0.1916109924698864, 2.2753677582762606`}, 
                   "Method" -> "Naive", "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "RandomImputer" -> 
                MachineLearning`MLProcessor["ImputeMissing", 
                  Association[
                  "Invertibility" -> "Perfect", "Missing" -> "Imputed", 
                   "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                   "StandardDeviation" -> {3.1397482586188885`, 
                    2.218223053321274}, "Method" -> "NaiveSampler", 
                   "VectorLength" -> 2, "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
                   "NumericalVector"]], "Preprocessor" -> 
                MachineLearning`MLProcessor["ToMLDataset", 
                  Association[
                  "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                   "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> Automatic, 
                    "ExampleWeights" -> Automatic, "RawExample" -> 
                    Missing["KeyAbsent", "RawExample"]]]}]], "ScalarFeature" -> 
                   True, "Invertibility" -> "Perfect", "Missing" -> 
                   "Allowed"]], "Processor" -> 
                MachineLearning`MLProcessor["Identity"], "Padder" -> 
                MachineLearning`MLProcessor["Identity"], "PostProcessor" -> 
                MachineLearning`MLProcessor["FromMLDataset", 
                  Association[
                  "DatasetFormat" -> Automatic, "Input" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
                   Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Length" -> 2]], 
                   "InversePreprocessor" -> 
                   MachineLearning`MLProcessor["Sequence", 
                    Association["Processors" -> {
                    MachineLearning`MLProcessor["List"], 
                    MachineLearning`MLProcessor["WrapMLDataset", 
                    Association[
                    "FeatureTypes" -> {"NumericalVector"}, 
                    "FeatureKeys" -> {"f1"}, "FeatureWeights" -> {1}, 
                    "ExampleWeights" -> 1]]}]], "ScalarFeature" -> True, 
                   "Invertibility" -> "Perfect", "Missing" -> "Allowed"]], 
                "Model" -> 
                Association[
                 "Matrix" -> {{-0.7071067811865474, -0.7071067811865477}, {
                   0.7071067811865477, -0.7071067811865474}}, "Processor" -> 
                  MachineLearning`MLProcessor["Standardize", 
                    Association[
                    "Invertibility" -> "Perfect", "Missing" -> "Allowed", 
                    "Input" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]], 
                    "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
                    "StandardDeviation" -> {3.1397482586188885`, 
                    2.218223053321274}, "Output" -> 
                    Association[
                    "f1" -> Association[
                    "Type" -> "NumericalVector", "Weight" -> 1]]]], 
                  "FinalDimension" -> 2, "Method" -> "Linear"], 
                "PerformanceGoal" -> Automatic, "Invertibility" -> 
                "Approximate", "Log" -> 
                Association[
                 "TrainingTime" -> 0.006375, "MaxTrainingMemory" -> 61288, 
                  "DataMemory" -> 272, "FunctionMemory" -> 21752, 
                  "LanguageVersion" -> {11.3, 0}, "Date" -> 
                  DateObject[{
                    2018, 8, 26, 17, 45, 6.228339`7.546947230119365}, 
                    "Instant", "Gregorian", 2.], "ProcessorCount" -> 6, 
                  "ProcessorType" -> "x86-64", "OperatingSystem" -> "MacOSX", 
                  "SystemWordLength" -> 64, "Evaluations" -> {}]]][#, 
               "ImputedVectors", PerformanceGoal -> "Quality"]& ), "Method" -> 
             "DimensionReduction", "VectorLength" -> 2, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Type" -> 
             "NumericalVector", "Version" -> {11.3, 0}, "ID" -> 
             7263179337424669307]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {-0.1916109924698864, 2.2753677582762606`}, 
             "StandardDeviation" -> {3.1397482586188885`, 2.218223053321274}, 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 1519634882283037191]]}, 
         "Invertibility" -> "Perfect", "Missing" -> "Imputed"]]], "Output" -> 
    Association["Preprocessor" -> MachineLearning`MLProcessor["ToMLDataset", 
        Association[
        "Input" -> Association["f1" -> Association["Type" -> "Numerical"]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Preprocessor" -> MachineLearning`MLProcessor["Sequence", 
           Association["Processors" -> {
              MachineLearning`MLProcessor["List"], 
              MachineLearning`MLProcessor["WrapMLDataset", 
               Association[
               "FeatureTypes" -> {"Numerical"}, "FeatureKeys" -> {"f1"}, 
                "FeatureWeights" -> Automatic, "ExampleWeights" -> Automatic, 
                "RawExample" -> Missing["KeyAbsent", "RawExample"]]]}]], 
         "ScalarFeature" -> True, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["ToVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 5408312798742616076]], 
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.7085340333113925}, 
             "StandardDeviation" -> {0.04981037173525743}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 642863965017912832]], 
           MachineLearning`MLProcessor["FromVector", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], "Output" -> 
             Association[
              "f1" -> Association["Type" -> "Numerical", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 6601973446491019239]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "Numerical", "Weight" -> 1], 
             "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "ProbabilityPostprocessor" -> Identity, 
      "InverseProcessorFunction" -> (0.7085340333113925 + 
       0.04981037173525743 #& ), 
      "ProcessorFunction" -> (-14.22462849860381 + 20.07614007209199 #& ), 
      "Name" -> "value", 
      "Quantiles" -> {-0.6375973261010259, 2.5550861903597437`}], "Prior" -> 
    Automatic, "Utility" -> (DiracDelta[#2 - #]& ), "Threshold" -> 0, 
    "PerformanceGoal" -> Automatic, "BatchProcessing" -> Automatic, "Model" -> 
    Association[
     AssumeDeterministic -> False, "EstimationMethod" -> "MaximumPosterior", 
      "NominalCovarianceType" -> "HammingDistance", "NumericalCovarianceType" -> 
      "SquaredExponential", "OptimizationMethod" -> "SimulatedAnnealing", 
      "TrainedGPModel" -> 
      Association[
       "CovarianceFunction" -> 
        Association[Method -> "SquaredExponential" + "WN", "HyperParameters" -> {
            Association[
            "NumericalLengthScale" -> 0.39394992926376593`, "SignalVariance" -> 
             1.3697739385357641`, "NoiseVariance" -> 0.13240515527622762`], 
            Association[
            "NumericalLengthScale" -> 29.28610640213226, "SignalVariance" -> 
             0.12954651046641313`, "NoiseVariance" -> 0.05666829995186344]}], 
        "MeanFunction" -> Association[], "Purpose" -> 
        Association["task" -> "FunctionOptimization"], 
        "TrainingData" -> {{{-0.8719702737116165, -0.8801548397008181}, \
{-0.8667036175144317, -0.596829668684387}, {-0.7758220552961811, 
          0.09114262553036255}, {-0.4523622420857599, 0.9303963853230407}, {
          1.25540966018856, -0.1950280387921623}, {-0.8714658081531794, 
          1.2431289723884635`}, {1.3647098709355925`, 1.159033333711174}, {
          1.2182044656370161`, -1.7516887697756736`}}, \
{-0.30365687262205304`, -0.6375973261010259, -0.6368045623547214, 
          1.2141654366868415`, -0.5939405068501149, -0.37503039479494316`, \
-0.18046276713641574`, 2.5550861903597437`}}, "Nominal-Numerical" -> 
        Association[
         "NumericalVector" -> {{-0.8719702737116165, -0.8801548397008181}, \
{-0.8667036175144317, -0.596829668684387}, {-0.7758220552961811, 
           0.09114262553036255}, {-0.4523622420857599, 0.9303963853230407}, {
           1.25540966018856, -0.1950280387921623}, {-0.8714658081531794, 
           1.2431289723884635`}, {1.3647098709355925`, 1.159033333711174}, {
           1.2182044656370161`, -1.7516887697756736`}}]], 
      "CholeskyTraining" -> CompressedData["
1:eJxTTMoPSmViYGDggGK19Ck9Zgc/2fftzKi6dO+NfUraUo4Lp1fb24ZP2fH3
/0c7wS9v2dNFG+wcV+S9WOK92I5lfln6BGZPW+O72hvLPpTYMUCB+bfb9YWf
ntsvVyr7Xb34ir379uMP2BWd7Hc63m3TvzjL7uatbMkLloz2yopLVi5fsMQ2
cO/elk9bivcxoAHRWNXHU5k+2c/ZmVt/8vM2+/gF2884Fuywm382j2nRhQn2
IVlNEjv3etpxX5Lj854dZIeuHwaWT2/eorr5k72y14X7Ztt32pUHZa8IY7hv
f2LmWqs3b37YFVsddF7mJIZhPzrwcoGEz9IVz+JiXi3d99TeuUiXP9N+Vofm
gq1s9vaE9MPA1w8cxv3CH+0fRFY0B0U/22dapHiuXpgVp/txgXtMXLFGQPc0
XdLnitu1haD7cYGYuldFIH8BAJezj2o=
       "], "HyperparameterSample" -> {}, 
      "GPModelSample" -> {}, "CholeskySample" -> {}, 
      "FeatureType" -> {"Numerical", "Numerical"}, "InputFeatures" -> {}, 
      "Processor" -> MachineLearning`MLProcessor["Sequence", 
        Association[
        "Input" -> Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Output" -> 
         Association[
          "f1" -> Association["Type" -> "NumericalVector", "Weight" -> 1]], 
         "Processors" -> {
           MachineLearning`MLProcessor["Standardize", 
            Association[
            "Invertibility" -> "Perfect", "Missing" -> "Allowed", "Input" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Mean" -> {0.20994914099845907`, -0.08541953624817847}, 
             "StandardDeviation" -> {1.0146184431041265`, 
              1.0564463870703606`}, "Output" -> 
             Association[
              "f1" -> Association[
                "Type" -> "NumericalVector", "Weight" -> 1]], 
             "Version" -> {11.3, 0}, "ID" -> 760100811966314436]], 
           MachineLearning`MLProcessor["FirstValues", 
            Association[
            "Info" -> Association["Type" -> "NumericalVector", "Weight" -> 1],
              "Key" -> "f1", "Invertibility" -> "Perfect", "Missing" -> 
             "Allowed"]]}, "Invertibility" -> "Perfect", "Missing" -> 
         "Allowed"]], "Method" -> "GaussianProcess", "Options" -> 
      Association[
       AssumeDeterministic -> 
        Association["Value" -> False, "Options" -> Association[]], 
        "CovarianceType" -> 
        Association[
         "Value" -> Association[
           "Numerical" -> "SquaredExponential", "Nominal" -> 
            "HammingDistance"], "Options" -> Association[]], 
        "EstimationMethod" -> 
        Association[
         "Value" -> "MaximumPosterior", "Options" -> Association[]], 
        "OptimizationMethod" -> 
        Association[
         "Value" -> "SimulatedAnnealing", "Options" -> Association[]], 
        "SearchMethod" -> 
        Association[
         "Value" -> "SimulatedAnnealing", "Options" -> Association[]], 
        "InputFeatures" -> 
        Association["Value" -> {}, "Options" -> Association[]]]], 
    "TrainingInformation" -> 
    Association[
     "LossName" -> "StandardDeviation", "BestModelInformation" -> Dataset[
        Association[
        "MeanCrossEntropy" -> PlusMinus[0., 0.16402306414512258`], 
         "StandardDeviation" -> 
         PlusMinus[0.040971070019608154`, 0.024933725268345367`], 
         "EvaluationTime" -> 0.001163, "TestSize" -> 2, "TrainingSize" -> 8, 
         "TrainingTime" -> 0.335438, "TrainingMemory" -> 152688, 
         "ModelMemory" -> 20256, "ExperimentCount" -> 1, "ModelUtility" -> 
         9.224623332893877, "MeanCrossEntropyHistory" -> {
           PlusMinus[0., 0.11598182092801224`]}, "StandardDeviationHistory" -> {
           PlusMinus[0.040971070019608154`, 0.017630806217489376`]}, 
         "Configuration" -> {
          "GaussianProcess", AssumeDeterministic -> False, 
           "CovarianceType" -> {
            None, "Numerical" -> "SquaredExponential", "Nominal" -> 
             "HammingDistance"}, "EstimationMethod" -> "MaximumPosterior", 
           "OptimizationMethod" -> "SimulatedAnnealing", "SearchMethod" -> 
           "SimulatedAnnealing", "InputFeatures" -> {}}], 
        TypeSystem`Struct[{
         "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
          "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory", 
          "ModelMemory", "ExperimentCount", "ModelUtility", 
          "MeanCrossEntropyHistory", "StandardDeviationHistory", 
          "Configuration"}, {TypeSystem`AnyType, TypeSystem`AnyType, 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Integer], 
          TypeSystem`Atom[Real], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Vector[TypeSystem`AnyType, 1], 
          TypeSystem`Tuple[{
            TypeSystem`Atom[String], TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType, TypeSystem`AnyType, TypeSystem`AnyType, 
            TypeSystem`AnyType}]}], 
        Association["ID" -> 116647163563171]], "Configurations" -> Dataset[
        Association[
        Association[
          "Value" -> "GaussianProcess", "Options" -> 
           Association[
            AssumeDeterministic -> Association["Value" -> False], 
             "CovarianceType" -> 
             Association[
              "Value" -> None, "Options" -> 
               Association[
                "Numerical" -> Association["Value" -> "SquaredExponential"], 
                 "Nominal" -> Association["Value" -> "HammingDistance"]]], 
             "EstimationMethod" -> Association["Value" -> "MaximumPosterior"],
              "OptimizationMethod" -> 
             Association["Value" -> "SimulatedAnnealing"], "SearchMethod" -> 
             Association["Value" -> "SimulatedAnnealing"], "InputFeatures" -> 
             Association["Value" -> {}]]] -> Association["Experiments" -> {
             Association[
             "MeanCrossEntropy" -> PlusMinus[0., 0.16402306414512258`], 
              "StandardDeviation" -> 
              PlusMinus[0.040971070019608154`, 0.024933725268345367`], 
              "EvaluationTime" -> 0.001163, "TestSize" -> 2, "TrainingSize" -> 
              8, "TrainingTime" -> 0.335438, "TrainingMemory" -> 152688, 
              "ModelMemory" -> 20256, "ExperimentCount" -> 1, "ModelUtility" -> 
              9.224623332893877, "MeanCrossEntropyHistory" -> {
                PlusMinus[0., 0.11598182092801224`]}, 
              "StandardDeviationHistory" -> {
                PlusMinus[0.040971070019608154`, 0.017630806217489376`]}]}, 
           "PredictedPerformances" -> 
           Association[
            "EvaluationTime" -> 0.001163, "ModelMemory" -> 20256, 
             "StandardDeviation" -> 
             PlusMinus[0.040971070019608154`, 0.024933725268345367`], 
             "TrainingMemory" -> 152688, "TrainingTime" -> 0.3689818], 
           "Index" -> 1]], 
        TypeSystem`Assoc[
         TypeSystem`Struct[{"Value", "Options"}, {
           TypeSystem`Atom[String], 
           TypeSystem`Assoc[TypeSystem`AnyType, 
            TypeSystem`Struct[{"Value", "Options"}, {TypeSystem`AnyType, 
              TypeSystem`Assoc[
               TypeSystem`Atom[String], 
               TypeSystem`Struct[{"Value"}, {
                 TypeSystem`Atom[String]}], 2]}], 6]}], 
         TypeSystem`Struct[{"Experiments", "PredictedPerformances", "Index"}, {
           TypeSystem`Vector[
            
            TypeSystem`Struct[{
             "MeanCrossEntropy", "StandardDeviation", "EvaluationTime", 
              "TestSize", "TrainingSize", "TrainingTime", "TrainingMemory", 
              "ModelMemory", "ExperimentCount", "ModelUtility", 
              "MeanCrossEntropyHistory", "StandardDeviationHistory"}, {
             TypeSystem`AnyType, TypeSystem`AnyType, 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Integer], 
              TypeSystem`Atom[Real], 
              TypeSystem`Vector[TypeSystem`AnyType, 1], 
              TypeSystem`Vector[TypeSystem`AnyType, 1]}], 1], 
           
           TypeSystem`Struct[{
            "EvaluationTime", "ModelMemory", "StandardDeviation", 
             "TrainingMemory", "TrainingTime"}, {
             TypeSystem`Atom[Real], 
             TypeSystem`Atom[Integer], TypeSystem`AnyType, 
             TypeSystem`Atom[Integer], 
             TypeSystem`Atom[Real]}], 
           TypeSystem`Atom[Integer]}], 1], 
        Association["ID" -> 116642868595875]], "MaxTrainingSize" -> 10, 
      "PreprocessorEvaluationTime" -> 3.234375`3.*^-6, "PreprocessorMemory" -> 
      39272, "RoundPartitioning" -> Dataset[{
         Association[
         "TrainingSizes" -> 8, "TimeBudgets" -> 0.5, "ElapsedTimes" -> 
          0.339543, "ExperimentCounts" -> 1]}, 
        TypeSystem`Vector[
         TypeSystem`Struct[{
          "TrainingSizes", "TimeBudgets", "ElapsedTimes", 
           "ExperimentCounts"}, {
           TypeSystem`Atom[Integer], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Real], 
           TypeSystem`Atom[Integer]}], 1], 
        Association[
        "Origin" -> HoldComplete[GeneralUtilities`AssociationTranspose, 
           Dataset`DatasetHandle[116651458530467]], "ID" -> 
         116655753497763]]], "Log" -> 
    Association["Example" -> MachineLearning`MLDataset[
        Association[
        "f1" -> Association[
          "Type" -> "NumericalVector", "Weight" -> 1, 
           "Values" -> {{4.815059667454756, 4.802005982640301}}, "ID" -> 
           4096411152747321565]], 
        Association[
        "ExampleNumber" -> 1, "ExampleWeights" -> 1, "RawExample" -> False]], 
      "TrainingTime" -> 0.433136, "MaxTrainingMemory" -> 233384, "DataMemory" -> 
      608, "FunctionMemory" -> 118320, "LanguageVersion" -> {11.3, 0}, "Date" -> 
      DateObject[{2018, 8, 26, 17, 45, 6.64758`7.575238560055732}, "Instant", 
        "Gregorian", 2.], "ProcessorCount" -> 6, "ProcessorType" -> "x86-64", 
      "OperatingSystem" -> "MacOSX", "SystemWordLength" -> 64, 
      "Evaluations" -> {}]]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.7442871082023783`*^9},
 CellLabel->
  "Out[169]=",ExpressionUUID->"c7c7aea1-0fc4-4fcd-b26a-e756d9b7a766"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "2.293434879538875`"}], ",", "0.6872573968696152`", ",", 
   "0.6768866412248256`"}], "}"}]], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287108211145*^9},
 CellLabel->
  "Out[170]=",ExpressionUUID->"503cc09e-8359-4edf-8298-8c00ef2ee9fb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "2.162455397138992`"}], ",", "1.537044720070819`"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287108895134*^9},
 CellLabel->
  "Out[171]=",ExpressionUUID->"05a286c6-1b64-4766-a79c-a052367cffeb"],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
y8+Jre3ykPJvS/j4owO8mvk70fzgzcevsXHftvYqlOdM5eNv6RLbI249zRtF
lRKLVOv8jHlWehX+K8nz8FUd7w0wKMwI1qwOemZFnmtyzos3lTzNmLo97dng
neT57Mg5cmnWJRntenW6fjKAPOM4obLvsdMnyLPyrqwe6gZvM24qnErfeJY8
22gFnNYPKM8QyQVkn4knz05/yb/V8/GXG0zIskkhz5P5+P/xOXV9SDZ5/snH
r9cibZJPOd3XrvLxb+utMXhKH/K8nY/f3nKnwylbynP25uNX7P/x7NDblH9z
4eMfdWZc4ISflH+zW+DYw6bkKdc/Z3vDqhp6fkiufN6kblDIbey4sqL+N71H
lzc53b1onc+tXmOzbNhQ8rxppM7hgQY3uaDjlYOblpLnysvydwcZJHEKpTML
zu8gz+xotVqrQwh5rt9bLtffICljWpPFoOgo8tz/L/k3Mz7+BdZKJWtPk+co
Pv6VqxLnPY4mz9l8/IdT3p35KHjv0OPjb1m20jY9lp4f9vPxJ0b7zw5Pp+cH
OTnblH/j/7BPpbzzC3pOW+P/J/7o+AS7NXX0XHF2tqZ9SVot9+HH4Oyuh8iz
fqiZWPp3x43R/N3R9Ch5rnwbuDxAvYr7MX9rj6L7lK/YMzLnrvTvmvNZ+u6Z
TifyrLH9G2cQUM5VNRnV+s4nzwU5g5Ol44G7vvLnyAmu5BlHz8jNdcdCyDOO
svm3E3z897Unn/okyL+J+Pit8zWivx8kz6/5+PcrndU74UKed/Hxr22xi7Mz
J8/9+Pi93qfKv19Anm/w8T/f+OjSm7nk2ZyPX3uN453eS8nzHD7eQX23XJu6
hTyr9t50Wnof4ZwWD+j+fDN5rrnZ0lR63+FW+ahs2RxBnq9bHe1hEPCVe7T+
kvamMsoL7Vca90g6X3GqqoeUCzTI8+qUAn/p/Mb9Wj37YkdL8jx6haVegPon
znmnr2SvIM/p9Jf8G44z0qoPZwjyb935+Js/+zhA5EOeK/n45+eLLp22IM+X
+PhtL3YS35lMnn35+L1udVLQ7CjI2/Pxv/pyZ3rKF8oLDeXjHzE5/YFJLeWF
zNQVlA0C5ETHs1XOnhaM5yA+3psBN3cd8iPPa/+ru/jNKTdbOm/TuQqZ97tf
XMbORcYzKsmz/GtbeYOAn1yl5tIvgcPJ8zOv1pnS+zWXM/NH+ei15Pns8Ehn
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[
        TagBox[{Polygon3DBox[CompressedData["
1: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
           "]], 
          Polygon3DBox[CompressedData["
1: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
           "]], 
          Polygon3DBox[CompressedData["
1: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
I/Ls2D/YBuO/Ay3T4QI=
           "]]},
         Annotation[#, "Charting`Private`Tag$2356127#1"]& ]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0rsvpFEYwOGPcRsMK6Jd0RAFpSgoN4pViSjoiGK3WIlsQakQOh1/AS0R
+k3o3MfMuM2ystkIu2Tjfg3PSRS/eU7mO5nznsxX0zvQ8S0niqJR3SqsL/Vb
87lR9IE/WM0NNvKQrTxnO5/Zw9JYFCX01bqew2zmONs4xS7OsJ+L/M5l/ucJ
77Wta/3TioFSXGWaa8xwnTthJu5yk3vcYlL74Xd4wBSzTPMnMzzkDo+4y1+c
dY9TPuhYN+GOmjBbkiNc4iAX2MdpdnKSnzjGJg6xjrX6Yh1nNx+d8Zl/2cIs
G8K9+JEX9v3hncp1FfaqyoxlrGSCFSwNe1jCBItZwng4j0UsYL4KrWMsCP9x
+I6vytNLeKYnGSOa83H2/j68Acy/Svc=
       "]]}, 
     {GrayLevel[0.2], 
      Line3DBox[{690, 1004, 473, 689, 1113, 912, 691, 1114, 913, 692, 1115, 
       914, 693, 1116, 915, 694, 1117, 916, 695, 1118, 1010, 1217, 696, 1119, 
       917, 697, 1120, 918, 698, 1121, 919, 699, 1122, 920, 700, 1123, 921, 
       701, 1124, 922, 702, 1322, 1005, 923, 1006}], 
      Line3DBox[{704, 1011, 1218, 703, 488, 705, 1125, 924, 706, 1126, 925, 
       707, 1127, 926, 708, 1128, 927, 709, 1129, 1012, 1219, 710, 1013, 1220,
        711, 1130, 928, 712, 1131, 929, 713, 1132, 930, 714, 1133, 931, 715, 
       1134, 932, 716, 1135, 933, 717}], 
      Line3DBox[{719, 1014, 1221, 718, 1015, 1222, 720, 504, 721, 1136, 934, 
       722, 1137, 935, 723, 1138, 936, 724, 1139, 1016, 1223, 725, 1017, 1224,
        726, 1018, 1225, 727, 1140, 937, 728, 1141, 938, 729, 1142, 939, 730, 
       1143, 940, 731, 1144, 941, 732}], 
      Line3DBox[{734, 1019, 1226, 733, 1020, 1227, 735, 1021, 1228, 736, 520, 
       737, 1145, 942, 738, 1146, 943, 739, 1147, 1022, 1229, 740, 1023, 1230,
        741, 1024, 1231, 742, 1025, 1232, 743, 1148, 944, 744, 1149, 945, 745,
        1150, 946, 746, 1151, 947, 747}], 
      Line3DBox[{749, 1026, 1233, 748, 1027, 1234, 750, 1028, 1235, 751, 1029,
        1236, 752, 536, 753, 1152, 948, 754, 1153, 1030, 1237, 755, 1031, 
       1238, 756, 1032, 1239, 757, 1033, 1240, 758, 1034, 1241, 759, 1154, 
       949, 760, 1155, 950, 761, 1156, 951, 762}], 
      Line3DBox[{764, 1035, 1242, 763, 1036, 1243, 765, 1037, 1244, 766, 1038,
        1245, 767, 1039, 1246, 768, 552, 769, 1157, 1040, 1247, 770, 1041, 
       1248, 771, 1042, 1249, 772, 1043, 1250, 773, 1044, 1251, 774, 1045, 
       1252, 775, 1158, 952, 776, 1159, 953, 777}], 
      Line3DBox[{781, 1160, 954, 779, 1161, 955, 783, 1162, 956, 785, 1163, 
       957, 787, 1164, 958, 789, 1165, 959, 791, 1166, 569, 793, 1167, 960, 
       795, 1168, 961, 797, 1169, 962, 799, 1170, 963, 801, 1171, 964, 803, 
       1172, 965, 805, 1174, 967, 807}], 
      Line3DBox[{806, 966, 1173, 804, 1265, 1057, 802, 1264, 1056, 800, 1263, 
       1055, 798, 1262, 1054, 796, 1261, 1053, 794, 1260, 1052, 792, 1259, 
       568, 790, 1258, 1051, 788, 1257, 1050, 786, 1256, 1049, 784, 1255, 
       1048, 782, 1254, 1047, 778, 1253, 1046, 780}], 
      Line3DBox[{809, 1058, 1266, 808, 1175, 968, 810, 1176, 969, 811, 1177, 
       970, 812, 1178, 971, 813, 1179, 972, 814, 1180, 1059, 1267, 815, 585, 
       816, 1181, 973, 817, 1182, 974, 818, 1183, 975, 819, 1184, 976, 820, 
       1185, 977, 821, 1186, 978, 822}], 
      Line3DBox[{824, 1060, 1268, 823, 1061, 1269, 825, 1187, 979, 826, 1188, 
       980, 827, 1189, 981, 828, 1190, 982, 829, 1191, 1062, 1270, 830, 1063, 
       1271, 831, 601, 832, 1192, 983, 833, 1193, 984, 834, 1194, 985, 835, 
       1195, 986, 836, 1196, 987, 837}], 
      Line3DBox[{839, 1064, 1272, 838, 1065, 1273, 840, 1066, 1274, 841, 1197,
        988, 842, 1198, 989, 843, 1199, 990, 844, 1200, 1067, 1275, 845, 1068,
        1276, 846, 1069, 1277, 847, 617, 848, 1201, 991, 849, 1202, 992, 850, 
       1203, 993, 851, 1204, 994, 852}], 
      Line3DBox[{854, 1070, 1278, 853, 1071, 1279, 855, 1072, 1280, 856, 1073,
        1281, 857, 1205, 995, 858, 1206, 996, 859, 1207, 1074, 1282, 860, 
       1075, 1283, 861, 1076, 1284, 862, 1077, 1285, 863, 633, 864, 1208, 997,
        865, 1209, 998, 866, 1210, 999, 867}], 
      Line3DBox[{869, 1078, 1286, 868, 1079, 1287, 870, 1080, 1288, 871, 1081,
        1289, 872, 1082, 1290, 873, 1211, 1000, 874, 1212, 1083, 1291, 875, 
       1084, 1292, 876, 1085, 1293, 877, 1086, 1294, 878, 1087, 1295, 879, 
       649, 880, 1213, 1001, 881, 1214, 1002, 882}], 
      Line3DBox[{884, 1088, 1296, 883, 1089, 1297, 885, 1090, 1298, 886, 1091,
        1299, 887, 1092, 1300, 888, 1093, 1301, 889, 1215, 1094, 1302, 890, 
       1095, 1303, 891, 1096, 1304, 892, 1097, 1305, 893, 1098, 1306, 894, 
       1099, 1307, 895, 665, 896, 1216, 1003, 897}], 
      Line3DBox[{911, 1009, 685, 910, 1321, 1111, 909, 1320, 1110, 908, 1319, 
       1109, 907, 1318, 1108, 906, 1317, 1107, 905, 1316, 1106, 904, 1315, 
       1314, 1105, 903, 1313, 1104, 902, 1312, 1103, 901, 1311, 1102, 900, 
       1310, 1101, 899, 1309, 1100, 898, 1112, 1308, 1007, 1008}]}, 
     {GrayLevel[0.2], 
      Line3DBox[{251, 474, 1113, 252, 488, 280, 1222, 503, 295, 1227, 518, 
       310, 1234, 533, 325, 1243, 548, 340, 1254, 563, 1161, 355, 578, 1175, 
       370, 1269, 593, 385, 1273, 608, 400, 1279, 623, 415, 1287, 638, 430, 
       1297, 653, 445, 1309, 668, 460}], 
      Line3DBox[{253, 475, 1114, 254, 489, 1125, 281, 504, 296, 1228, 519, 
       311, 1235, 534, 326, 1244, 549, 341, 1255, 564, 1162, 356, 579, 1176, 
       371, 594, 1187, 386, 1274, 609, 401, 1280, 624, 416, 1288, 639, 431, 
       1298, 654, 446, 1310, 669, 461}], 
      Line3DBox[{255, 476, 1115, 256, 490, 1126, 282, 505, 1136, 297, 520, 
       312, 1236, 535, 327, 1245, 550, 342, 1256, 565, 1163, 357, 580, 1177, 
       372, 595, 1188, 387, 610, 1197, 402, 1281, 625, 417, 1289, 640, 432, 
       1299, 655, 447, 1311, 670, 462}], 
      Line3DBox[{257, 477, 1116, 258, 491, 1127, 283, 506, 1137, 298, 521, 
       1145, 313, 536, 328, 1246, 551, 343, 1257, 566, 1164, 358, 581, 1178, 
       373, 596, 1189, 388, 611, 1198, 403, 626, 1205, 418, 1290, 641, 433, 
       1300, 656, 448, 1312, 671, 463}], 
      Line3DBox[{259, 478, 1117, 260, 492, 1128, 284, 507, 1138, 299, 522, 
       1146, 314, 537, 1152, 329, 552, 344, 1258, 567, 1165, 359, 582, 1179, 
       374, 597, 1190, 389, 612, 1199, 404, 627, 1206, 419, 642, 1211, 434, 
       1301, 657, 449, 1313, 672, 464}], 
      Line3DBox[{261, 479, 1118, 263, 493, 1129, 285, 508, 1139, 300, 523, 
       1147, 315, 538, 1153, 330, 553, 1157, 345, 568, 1166, 360, 583, 1180, 
       375, 598, 1191, 390, 613, 1200, 405, 628, 1207, 420, 643, 1212, 435, 
       658, 1215, 450, 1314, 673, 465}], 
      Line3DBox[{265, 481, 1119, 266, 1220, 495, 287, 1224, 510, 302, 1230, 
       525, 317, 1238, 540, 332, 1248, 555, 347, 1260, 570, 1167, 362, 585, 
       377, 1271, 600, 392, 1276, 615, 407, 1283, 630, 422, 1292, 645, 437, 
       1303, 660, 452, 1316, 675, 467}], 
      Line3DBox[{267, 482, 1120, 268, 496, 1130, 288, 1225, 511, 303, 1231, 
       526, 318, 1239, 541, 333, 1249, 556, 348, 1261, 571, 1168, 363, 586, 
       1181, 378, 601, 393, 1277, 616, 408, 1284, 631, 423, 1293, 646, 438, 
       1304, 661, 453, 1317, 676, 468}], 
      Line3DBox[{269, 483, 1121, 270, 497, 1131, 289, 512, 1140, 304, 1232, 
       527, 319, 1240, 542, 334, 1250, 557, 349, 1262, 572, 1169, 364, 587, 
       1182, 379, 602, 1192, 394, 617, 409, 1285, 632, 424, 1294, 647, 439, 
       1305, 662, 454, 1318, 677, 469}], 
      Line3DBox[{271, 484, 1122, 272, 498, 1132, 290, 513, 1141, 305, 528, 
       1148, 320, 1241, 543, 335, 1251, 558, 350, 1263, 573, 1170, 365, 588, 
       1183, 380, 603, 1193, 395, 618, 1201, 410, 633, 425, 1295, 648, 440, 
       1306, 663, 455, 1319, 678, 470}], 
      Line3DBox[{273, 485, 1123, 274, 499, 1133, 291, 514, 1142, 306, 529, 
       1149, 321, 544, 1154, 336, 1252, 559, 351, 1264, 574, 1171, 366, 589, 
       1184, 381, 604, 1194, 396, 619, 1202, 411, 634, 1208, 426, 649, 441, 
       1307, 664, 456, 1320, 679, 471}], 
      Line3DBox[{275, 486, 1124, 276, 500, 1134, 292, 515, 1143, 307, 530, 
       1150, 322, 545, 1155, 337, 560, 1158, 352, 1265, 575, 1172, 367, 590, 
       1185, 382, 605, 1195, 397, 620, 1203, 412, 635, 1209, 427, 650, 1213, 
       442, 665, 457, 1321, 680, 472}], 
      Line3DBox[{277, 682, 1322, 683, 278, 501, 1135, 293, 516, 1144, 308, 
       531, 1151, 323, 546, 1156, 338, 561, 1159, 353, 576, 1173, 1174, 368, 
       591, 1186, 383, 606, 1196, 398, 621, 1204, 413, 636, 1210, 428, 651, 
       1214, 443, 666, 1216, 458, 685, 686, 687}], 
      Line3DBox[{459, 667, 684, 1308, 444, 652, 1296, 429, 637, 1286, 414, 
       622, 1278, 399, 607, 1272, 384, 592, 1268, 369, 577, 1266, 354, 1160, 
       562, 1253, 339, 547, 1242, 324, 532, 1233, 309, 517, 1226, 294, 502, 
       1221, 279, 487, 1218, 250, 473, 681, 688}], 
      Line3DBox[{466, 674, 1315, 451, 659, 1302, 436, 644, 1291, 421, 629, 
       1282, 406, 614, 1275, 391, 599, 1270, 376, 584, 1267, 361, 569, 1259, 
       346, 554, 1247, 331, 539, 1237, 316, 524, 1229, 301, 509, 1223, 286, 
       494, 1219, 264, 480, 1217, 262}]}, {}, {}}},
   VertexNormals->CompressedData["
1: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
bTi41wscRJ8sYJ6ZhDimr1y1QlVo0T1uXf/NE7K/dT1dRLUXPJ0VsscoB2sT
JDYWSLuDNsN9OSdqfcrNxspm1UdB+kfVCkYDF7jNILWQ1PWIvL8b1XlJlYqT
rk4JCAjipk/9/3Tn/Mo8+lnTJME4osNp6eDv1jX7QsaJ/fu22zK2U4CrOifF
TTM3Q9X3x03Evs+JIzyr3hLFvUtX1Xipw5HiF2tI3OhIw8G46HCwCi63ejXr
SjSQfyxjFFAMvZJpUSbUvHAc5Wls/FaGPz8Kih/LqYRpLeU1fycmoX3jo8WK
/afRO3fmRmhTLSQYMyzioNp3jOQLFcqEwVfxKxXcEXXAs7xPnm2ayrs3cLjc
+rMEU+/ZFvtvOkqdW611JJ+K5lJeoSikhKqC5xKWzhnC5o8LFMm8N0wsv5On
Z4xprh75k/kH4c/wuZ5f/x8+ZkOHjz1vMws8N5+PsceDNscO1wP//A6LeCrP
CvsgtHXKKAVL/s7qLq49D+awylPgIxVH6S+UbWj1hgS14dBDvheg8bVJndgo
ld95zUkcsTKi8qXOecdee/g0HihNeFNbGipL64uNsH/jCzbuG8egqk5j4J9O
HQ03M6XDzbaK/2GQWhKKSb6CT6SD66Eg53XHFso/cdHGUd8rLKFhqknZcsU5
2Ku+vrib2hffMsUqGaKs8Kv4iMzjYBtoWi3YTXjLpjQ8TZgOT+N9qsvjO6oI
Ip7pTi13S6HugIWvCmW/R9Pj0qTT49Kj6XF9pNPjmqDpcTXT6XF50PS4lOj0
uG7S9Lgu0OlxtdD0uPzo9LgO0vS4bOn0uA7SdLfe0nS3VtN0t5JpulvzNN0t
Y5ruVj5Nd0uGprv1naa7tZ+mu8VBp7s1QdPdek+nuzVA093qpOluGdN0txRo
dX+sdDhbJk2Py4ZOjwtzLSQOHHHHtcFHnX8e0geXu28Xk/e42I6Dl1PPJWCW
c+O9dd5G8FOnkYPwLq76xhZ4dafhgoPPZy+3GoADa8/WM8TPpa7pz5NSMdfj
6uoobhXwTAt0J/Wt/l8NttXJxGJK3fTrGliPaWrD86Qeba5m8ysn4QAUqpV/
rLpIHhXVPt8l7+maPeyicsX+4LjpXruDuTxsWLDiNvGzyCrJR0Y8kbCpqnfQ
frc++Dw/E0feVe+McAszWsaBc0J9f9/B49DSfeMpqS/T/GT4V2V1LDxflj88
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
QPdu+z/KAZ8D
    "]],
  Axes->True,
  AxesLabel->{
    FormBox["\"Logloss\"", TraditionalForm], 
    FormBox["\"Exp[L1]\"", TraditionalForm], 
    FormBox["\"Exp[L2]\"", TraditionalForm]},
  AxesOrigin->{Automatic, Automatic, Automatic},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGrids->None,
  FaceGridsStyle->Automatic,
  ImageSize->1000,
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{All, All, All},
  PlotRangePadding->{Automatic, Automatic, Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.0845087878927264`, 3.049331513224845, 0.9876325285435542},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.7442871126703987`*^9},
 CellLabel->
  "Out[172]=",ExpressionUUID->"bd5442e0-a874-455f-bbda-cfc89e822ef6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.7085808429146755`", ",", "0.7091951539210026`", ",", 
     "0.709294125265882`", ",", "0.6963160000081625`", ",", 
     "0.6781689135731636`", ",", "0.6785454830406082`", ",", 
     "0.695355422447142`", ",", "0.7010483586148517`", ",", 
     "0.6793193086459436`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7085869059516777`", ",", "0.7092746516435204`", ",", 
     "0.7093122681384026`", ",", "0.6942292723359562`", ",", 
     "0.672016839955536`", ",", "0.671218708114843`", ",", 
     "0.7031547527495466`", ",", "0.7322534416198941`", ",", 
     "0.7006635790594439`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7085736576037893`", ",", "0.7089876908219548`", ",", 
     "0.7089579388792068`", ",", "0.6996388328035905`", ",", 
     "0.6851445575521564`", ",", "0.684848088332703`", ",", 
     "0.7212640371591462`", ",", "0.768323907646258`", ",", 
     "0.7389633982568184`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7087223531713589`", ",", "0.7089857409229696`", ",", 
     "0.7088194131480269`", ",", "0.7056121112751561`", ",", 
     "0.700531494064209`", ",", "0.7013016706742652`", ",", 
     "0.7253912731021146`", ",", "0.7614988084299178`", ",", 
     "0.7442143179021146`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7105893936384597`", ",", "0.712167490652899`", ",", 
     "0.7105031451208679`", ",", "0.7082110791505135`", ",", 
     "0.7066011974210432`", ",", "0.7071247289380213`", ",", 
     "0.716388684736359`", ",", "0.7307483196341065`", ",", 
     "0.7246651541791346`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.721064219457479`", ",", "0.7305640609948287`", ",", 
     "0.7204425122783751`", ",", "0.7095997425782571`", ",", 
     "0.7051121288199512`", ",", "0.7046235600949964`", ",", 
     "0.7088415272783704`", ",", "0.7126609604855124`", ",", 
     "0.7113970284827336`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.749049771260672`", ",", "0.7797609250875877`", ",", 
     "0.7470173278070947`", ",", "0.7119054854568782`", ",", 
     "0.6970430668459958`", ",", "0.6947714972016538`", ",", 
     "0.7033313651188474`", ",", "0.706375628840488`", ",", 
     "0.7058664173941828`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.7779645341456345`", ",", "0.8305922292386391`", ",", 
     "0.7744469012521861`", ",", "0.7138944955372702`", ",", 
     "0.6872694437217823`", ",", "0.6830632557373574`", ",", 
     "0.6983325612849096`", ",", "0.702613219887351`", ",", 
     "0.701489954714586`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.771590881680453`", ",", "0.8193865523921361`", ",", 
     "0.7683622477458008`", ",", "0.7129901135324115`", ",", 
     "0.6876706226349365`", ",", "0.6835741944209944`", ",", 
     "0.6982735536250413`", ",", "0.7015113042234249`", ",", 
     "0.699910241968153`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287112986706*^9},
 CellLabel->
  "Out[173]=",ExpressionUUID->"1630d1eb-d77e-4a6a-bc7d-f92f698c2392"],

Cell[BoxData["\<\"/Users/thomasmellan/Documents/Numerai/\
elasticNetMonteCarloCrossVal-scripts/sampleJobUsage/pNet.pdf\"\>"], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.74428711503568*^9},
 CellLabel->
  "Out[174]=",ExpressionUUID->"20eaaff0-c24e-476c-bf25-178014a736f6"],

Cell[BoxData["\<\"/Users/thomasmellan/Documents/Numerai/\
elasticNetMonteCarloCrossVal-scripts/sampleJobUsage/minConfigValue.txt\"\>"], \
"Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287115069622*^9},
 CellLabel->
  "Out[175]=",ExpressionUUID->"58ef3258-321d-4ff7-9a27-49f64d0031c7"],

Cell[BoxData["\<\"/Users/thomasmellan/Documents/Numerai/\
elasticNetMonteCarloCrossVal-scripts/sampleJobUsage/minConfigFunction.txt\"\>\
"], "Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287115074132*^9},
 CellLabel->
  "Out[176]=",ExpressionUUID->"28908a31-0e38-47c9-8924-2dd43aa9f1df"],

Cell[BoxData["\<\"/Users/thomasmellan/Documents/Numerai/\
elasticNetMonteCarloCrossVal-scripts/sampleJobUsage/pNetTable.txt\"\>"], \
"Output",
 CellChangeTimes->{3.744024191008706*^9, 3.7442849850995007`*^9, 
  3.74428521944158*^9, 3.7442854091134233`*^9, 3.744286703833826*^9, 
  3.7442869022470016`*^9, 3.744287115078776*^9},
 CellLabel->
  "Out[177]=",ExpressionUUID->"dd9cd124-9f9b-4d35-8d8d-28efcfc8bda6"]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->Automatic,
WindowSize->{1680, 965},
WindowMargins->{{487, Automatic}, {Automatic, 0}},
FrontEndVersion->"11.3 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 5, \
2018)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[422, 15, 262, 4, 45, "Subsubsection",ExpressionUUID->"418f59ae-741d-4ff7-a1b3-9d255620267d"],
Cell[687, 21, 335, 10, 104, "Text",ExpressionUUID->"0cb8e356-e75f-45c0-9fd7-f95fb2ec4589"],
Cell[CellGroupData[{
Cell[1047, 35, 1499, 36, 178, "Input",ExpressionUUID->"61130cd6-dba8-4963-855d-ef412e916665"],
Cell[2549, 73, 330, 6, 34, "Output",ExpressionUUID->"48a3cc85-01bc-47d9-9bf1-3c93a118123e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2916, 84, 22419, 582, 1559, "Input",ExpressionUUID->"1360be94-0d69-4d0e-81d2-9f8dd1eecb8a",
 InitializationCell->True],
Cell[25338, 668, 298, 5, 34, "Output",ExpressionUUID->"b23972c4-4ac9-468a-a21b-f1fcc1832c65"],
Cell[25639, 675, 104641, 1897, 63, "Output",ExpressionUUID->"1650214b-24ff-456d-a113-6442fe902a65"],
Cell[130283, 2574, 31921, 621, 63, "Output",ExpressionUUID->"c7c7aea1-0fc4-4fcd-b26a-e756d9b7a766"],
Cell[162207, 3197, 427, 9, 34, "Output",ExpressionUUID->"503cc09e-8359-4edf-8298-8c00ef2ee9fb"],
Cell[162637, 3208, 397, 9, 34, "Output",ExpressionUUID->"05a286c6-1b64-4766-a79c-a052367cffeb"],
Cell[163037, 3219, 82403, 1352, 584, "Output",ExpressionUUID->"bd5442e0-a874-455f-bbda-cfc89e822ef6"],
Cell[245443, 4573, 3185, 70, 119, "Output",ExpressionUUID->"1630d1eb-d77e-4a6a-bc7d-f92f698c2392"],
Cell[248631, 4645, 402, 6, 34, "Output",ExpressionUUID->"20eaaff0-c24e-476c-bf25-178014a736f6"],
Cell[249036, 4653, 415, 7, 34, "Output",ExpressionUUID->"58ef3258-321d-4ff7-9a27-49f64d0031c7"],
Cell[249454, 4662, 418, 7, 34, "Output",ExpressionUUID->"28908a31-0e38-47c9-8924-2dd43aa9f1df"],
Cell[249875, 4671, 410, 7, 34, "Output",ExpressionUUID->"dd9cd124-9f9b-4d35-8d8d-28efcfc8bda6"]
}, Open  ]]
}, Open  ]]
}
]
*)

